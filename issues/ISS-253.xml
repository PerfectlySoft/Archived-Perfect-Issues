<!-- 
RSS generated by JIRA (7.3.0#73011-sha1:3c73d0e0b5ea20e2128531b9adf9b0585752b90a) at Tue Feb 06 20:49:40 UTC 2018

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://jira.perfect.org:8080/si/jira.issueviews:issue-xml/ISS-253/ISS-253.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>PerfectlySoft JIRA</title>
    <link>http://jira.perfect.org:8080</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.3.0</version>
        <build-number>73011</build-number>
        <build-date>03-01-2017</build-date>
    </build-info>

<item>
            <title>[ISS-253] Attach Data to the Request Object</title>
                <link>http://jira.perfect.org:8080/browse/ISS-253</link>
                <project id="10007" key="ISS">Issues</project>
                    <description>&lt;p&gt;I&apos;m trying to work on integrating Turnstile with Perfect, and I&apos;ve come to a roadblock. It doesn&apos;t seem like there&apos;s a way to attach arbitrary data (like for instance, authentication data) to a request object.&lt;/p&gt;

&lt;p&gt;In Express.js, a request object is a JS object (so can be extended with custom fields), Vapor has the concept of &quot;storage&quot;, and Kitura has &quot;userInfo&quot;, which are &lt;span class=&quot;error&quot;&gt;&amp;#91;String: Any&amp;#93;&lt;/span&gt; dictionaries. &lt;/p&gt;

&lt;p&gt;Alternatively, I was thinking of:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Subclassing the Request Object&lt;/b&gt;&lt;br/&gt;
With a subclass, I could add the authentication data and ask end users to cast their stuff if they needed access to the authentication info. However, that felt like it would be fairly fragile, and would cause compatibility issues with other extensions. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Using the built in session store&lt;/b&gt;&lt;br/&gt;
I assumed that there was some sort of session store built into Perfect, since I saw it listed on perfect.org, but I couldn&apos;t find it anywhere? &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Thread based Singletons&lt;/b&gt;&lt;br/&gt;
I could make a &quot;User&quot; object that&apos;s a singleton for each thread. Since Perfect has the one-thread-per request model, I could make it work. I haven&apos;t looked into how to do this with Swift, though. &lt;/p&gt;

&lt;p&gt;I&apos;m not quite sure the best way to solve this problem, but the ones I&apos;ve suggested might not be best within the Perfect framework. Open to ideas on how to solve this!&lt;/p&gt;</description>
                <environment></environment>
        <key id="10707">ISS-253</key>
            <summary>Attach Data to the Request Object</summary>
                <type id="10104" iconUrl="http://jira.perfect.org:8080/secure/viewavatar?size=xsmall&amp;avatarId=10311&amp;avatarType=issuetype">New Feature</type>
                                            <priority id="2" iconUrl="http://jira.perfect.org:8080/images/icons/priorities/high.svg">High</priority>
                        <status id="5" iconUrl="http://jira.perfect.org:8080/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="10000">Done</resolution>
                                        <assignee username="kjessup">Kyle Jessup</assignee>
                                    <reporter username="edward@stormpath.com">Edward Jiang</reporter>
                            <created>Tue, 23 Aug 2016 20:34:33 -0400</created>
                <updated>Fri, 26 Aug 2016 12:35:44 -0400</updated>
                            <resolved>Fri, 26 Aug 2016 10:43:51 -0400</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="10937" author="kjessup" created="Wed, 24 Aug 2016 15:14:34 -0400"  >&lt;p&gt;Thanks Edward, I had seen a need for this as well and had been meaning to add this sort of &quot;scratch pad&quot; storage. I will try and resolve this one ASAP.&lt;/p&gt;

&lt;p&gt;Regarding sessions, we used to have a session manager system but it used SQLite for storage and I wasn&apos;t quite satisfied with the way it operated so we pulled it when we started in on P 2.0. The goal is to have one which uses Redis by default thus making the system as a whole more distributed. However, we have not started on that component yet.&lt;/p&gt;

&lt;p&gt;&#8211; Kyle Jessup&lt;/p&gt;</comment>
                            <comment id="10939" author="edward@stormpath.com" created="Wed, 24 Aug 2016 16:17:57 -0400"  >&lt;p&gt;Awesome, thanks Kyle! &lt;/p&gt;</comment>
                            <comment id="10943" author="kjessup" created="Fri, 26 Aug 2016 10:42:41 -0400"  >&lt;p&gt;Hi Edward Jiang,&lt;/p&gt;

&lt;p&gt;Added HTTPRequest.scratchPad dictionary for general usage.&lt;/p&gt;

&lt;p&gt;It was added to the request since you can always get the request object even if you only keep track of the response object.&lt;/p&gt;

&lt;p&gt;&#8211; Kyle Jessup&lt;/p&gt;</comment>
                            <comment id="10944" author="kjessup" created="Fri, 26 Aug 2016 10:43:51 -0400"  >&lt;p&gt;Added HTTPRequest.scratchPad dictionary for general usage.&lt;br/&gt;
It was added to the request since you can always get the request object even if you only keep track of the response object.&lt;/p&gt;</comment>
                            <comment id="10945" author="edward@stormpath.com" created="Fri, 26 Aug 2016 11:13:30 -0400"  >&lt;p&gt;Awesome. What do you mean by &quot;you can always get the request object&quot;? Is it a thread singleton or something? Can you please point me to docs here? =]&lt;/p&gt;

&lt;p&gt;Thanks Kyle!&lt;/p&gt;</comment>
                            <comment id="10946" author="kjessup" created="Fri, 26 Aug 2016 12:05:34 -0400"  >&lt;p&gt;Hi Edward Jiang,&lt;/p&gt;

&lt;p&gt;The response object has a &quot;request&quot; property which always points to the request.&lt;br/&gt;
We are working right now on generating our updated API documentation, but basically it&apos;s:&lt;/p&gt;

&lt;p&gt;/// An HTTP based response object.&lt;br/&gt;
/// Contains all header and body data which will be delivered to the client.&lt;br/&gt;
public protocol HTTPResponse: class {&lt;br/&gt;
	/// The request object which instigated this response.&lt;br/&gt;
    var request: HTTPRequest &lt;/p&gt;
{ get }
&lt;p&gt;&#8230;&lt;/p&gt;

&lt;p&gt;&#8211; Kyle Jessup&lt;/p&gt;</comment>
                            <comment id="10947" author="edward@stormpath.com" created="Fri, 26 Aug 2016 12:35:44 -0400"  >&lt;p&gt;Ah cool. I thought filters could generate new request objects to pass along, though? So the reference might not be to the correct request object.&lt;/p&gt;

&lt;p&gt;Anyways, this should give me enough to start working &amp;#8211; so we can probably find some time on Monday to discuss Turnstile further by then!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10400" key="com.atlassian.servicedesk.approvals-plugin:sd-approvals">
                        <customfieldname>Approvals</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10500" key="com.atlassian.servicedesk:sd-customer-organizations">
                        <customfieldname>Organizations</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i001wv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10101" key="com.atlassian.servicedesk:sd-request-participants">
                        <customfieldname>Request participants</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10104" key="com.atlassian.servicedesk:sd-sla-field">
                        <customfieldname>Time to resolution</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>