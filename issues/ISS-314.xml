<!-- 
RSS generated by JIRA (7.3.0#73011-sha1:3c73d0e0b5ea20e2128531b9adf9b0585752b90a) at Tue Feb 06 20:50:10 UTC 2018

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://jira.perfect.org:8080/si/jira.issueviews:issue-xml/ISS-314/ISS-314.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>PerfectlySoft JIRA</title>
    <link>http://jira.perfect.org:8080</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.3.0</version>
        <build-number>73011</build-number>
        <build-date>03-01-2017</build-date>
    </build-info>

<item>
            <title>[ISS-314] Memory Leak in Perfect-CURL</title>
                <link>http://jira.perfect.org:8080/browse/ISS-314</link>
                <project id="10007" key="ISS">Issues</project>
                    <description>&lt;p&gt;Hi All,&lt;/p&gt;

&lt;p&gt;I recently discovered a memory leak in Perfect-CURL. At the end of each network request I was calling .reset() on the CURL object. I thought I was being a good citizen by doing this &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/tongue.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; but it turned out it was the cause of a massive memory leak.&lt;/p&gt;

&lt;p&gt;To fix it, I tried calling .close() instead of .reset() and that fixed the memory leak. I also tried just using neither and that also fixed the memory leak. &lt;/p&gt;

&lt;p&gt;I&apos;m not sure what the intention of the reset command vs the close command is, but perhaps we should consider removing it since it seems to have no purpose? A new curl object could be allocated if we wanted it to be reset.&lt;/p&gt;

&lt;p&gt;I was going to attach my instruments files that show each of the 3 options I mentioned above. However, they were gigantic (almost 1gb). I can provide sample code if needed. But basically, I was doing about 30 networking operations at once per user flow of the app. Thats where I could really see the memory leak.&lt;/p&gt;</description>
                <environment></environment>
        <key id="10803">ISS-314</key>
            <summary>Memory Leak in Perfect-CURL</summary>
                <type id="10102" iconUrl="http://jira.perfect.org:8080/secure/viewavatar?size=xsmall&amp;avatarId=10303&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="http://jira.perfect.org:8080/images/icons/priorities/medium.svg">Medium</priority>
                        <status id="5" iconUrl="http://jira.perfect.org:8080/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="10000">Done</resolution>
                                        <assignee username="kjessup">Kyle Jessup</assignee>
                                    <reporter username="jeffburg@jeffburg.com">Jeffrey Bergier</reporter>
                            <created>Tue, 1 Nov 2016 12:51:51 -0400</created>
                <updated>Fri, 19 Jan 2018 13:50:34 -0500</updated>
                            <resolved>Fri, 19 Jan 2018 13:50:34 -0500</resolved>
                                                    <fixVersion>2.0.3</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                            <timeestimate seconds="0">0 minutes</timeestimate>
                            <timespent seconds="57600">2 days</timespent>
                                <comments>
                            <comment id="11091" author="rocky" created="Tue, 1 Nov 2016 14:03:04 -0400"  >&lt;p&gt;Hi Jeffrey Bergier,&lt;/p&gt;

&lt;p&gt;Would you like to share the code with me, please? &lt;/p&gt;

&lt;p&gt;As far as I know, &lt;tt&gt;reset()&lt;/tt&gt; means to clear the cURL object and reuse it while &lt;tt&gt;close()&lt;/tt&gt; means to disable this object as the example code below:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;import cURL&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;import PerfectCURL&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;let url = &quot;https://hestiatv.domain.com/t/&quot;&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;let curl = CURL()&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;for _ in 1...5 {&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;let _ = curl.setOption(CURLOPT_URL, s: url)&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;let _ = curl.setOption(CURLOPT_USERAGENT, s: &quot;CURL&quot;)&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;let (_, _, body ) = curl.performFully()&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;  &lt;tt&gt;let content = String(bytes:body, encoding:String.Encoding.utf8)&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;  &lt;tt&gt;print(content!)&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;curl.reset()&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;sleep(1)&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;}&lt;/tt&gt;&lt;/p&gt;



&lt;p&gt;&lt;tt&gt;for _ in 1...5 {&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;let _ = curl.setOption(CURLOPT_URL, s: url)&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;let _ = curl.setOption(CURLOPT_USERAGENT, s: &quot;CURL&quot;)&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;let (_, _, body ) = curl.performFully()&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;  &lt;tt&gt;let content = String(bytes:body, encoding:String.Encoding.utf8)&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;  &lt;tt&gt;print(content!)&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;curl.close()&lt;/tt&gt;&lt;br/&gt;
  &lt;tt&gt;sleep(1)&lt;/tt&gt;&lt;br/&gt;
&lt;tt&gt;}&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;If I was correct, the above code should request a url and print six different timestamps then four blank lines followed because the object had been closed at the last four requests.&lt;/p&gt;

&lt;p&gt;So according to the source code of Perfect-CURL, I would like to suggest to place a &lt;tt&gt;&quot;defer { curl.close() }&quot;&lt;/tt&gt; immediately after the object initialization to clean the memory automatically. Then you can reset the curl object as many as you want to reuse this object in the same program.&lt;/p&gt;

&lt;p&gt;If possible, please post the memory leak info in detail. &lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

&lt;p&gt;Warm regards,&lt;br/&gt;
&#8211; Rocky&lt;/p&gt;</comment>
                            <comment id="11092" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 15:05:45 -0400"  >&lt;p&gt;Hi, I built a small sample project thats similar to my usage. Its based on PerfectTemplate. It has 4 routes. Each corresponds to different commands on CURL. I was playing with it in Xcode with the memory panel open under the debug panel. It seems like all options leak. But close() leaks the least. reset() leaks a lot and reset(); close(); leaks just as much as reset. You can watch the memory usage and just refresh the browser page. &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/attachment/10218/10218_CURLLeak.zip&quot; title=&quot;CURLLeak.zip attached to ISS-314&quot;&gt;CURLLeak.zip&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;One note, it will fail to build because the CURL class is not open and I subclassed it to print when the CURL object is deallocated. It seems to always be deallocated. But there is still a memory leak. In the Xcode project, you can change the curl object to be open class and then it will compile.&lt;/p&gt;</comment>
                            <comment id="11093" author="rocky" created="Tue, 1 Nov 2016 16:26:37 -0400"  >&lt;p&gt;Hi Jeffrey Bergier,&lt;/p&gt;

&lt;p&gt;Thank you for describing your project. Unfortunately, I can&apos;t download your CURLLeak.zip file, so would you please upload it once more?&lt;/p&gt;

&lt;p&gt;Anyway, I have used the Xcode Instrument to check the memory leak for the above code for both &lt;tt&gt;reset()&lt;/tt&gt; &amp;amp; &lt;tt&gt;close()&lt;/tt&gt;, one minute, 30 url requests with &lt;tt&gt;reset()&lt;/tt&gt; and 30 with &lt;tt&gt;close()&lt;/tt&gt;, but still didn&apos;t find any leaks as attached.&lt;br/&gt;
 &lt;span class=&quot;image-wrap&quot; style=&quot;&quot;&gt;&lt;a id=&quot;10219_thumb&quot; href=&quot;http://jira.perfect.org:8080/secure/attachment/10219/10219_Screen+Shot+2016-11-01+at+4.24.04+PM.png&quot; title=&quot;Screen Shot 2016-11-01 at 4.24.04 PM.png&quot; file-preview-type=&quot;image&quot; file-preview-id=&quot;10219&quot; file-preview-title=&quot;Screen Shot 2016-11-01 at 4.24.04 PM.png&quot;&gt;&lt;img src=&quot;http://jira.perfect.org:8080/secure/thumbnail/10219/_thumb_10219.png&quot; style=&quot;border: 0px solid black&quot; /&gt;&lt;/a&gt;&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;So would you mind sharing more info with me? Thank you so much!&lt;/p&gt;


&lt;p&gt;Warm regards,&lt;/p&gt;

&lt;p&gt;&#8211; Rockford Wei&lt;/p&gt;</comment>
                            <comment id="11094" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 16:57:24 -0400"  >&lt;p&gt;Weird. I was able to redownload the zip. Well if you replace the main.swift file in PerfectTemplate with the following code (and add the CURL dependency) then you can replicate it. I also attached screenshot above. The one where the browser is at 127.0.0.1:8181/resetclose clearly leaks a lot more than 127.0.0.1:8181/close. /close May not be leaking at all. Its been hard to tell from my tests. But anything that calls reset is definitely leaking. This also may have to do with a difference between perform and performFully. I&apos;m using perform.&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unable to find source-code formatter for language: swift.&lt;/span&gt; Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xml&lt;/div&gt;&lt;pre&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  main.swift
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  PerfectTemplate
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  Created by Kyle Jessup on 2015-11-05.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//	Copyright (C) 2015 PerfectlySoft, Inc.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//===----------------------------------------------------------------------===//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// This source file is part of the Perfect.org open source project
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Copyright (c) 2015 - 2016 PerfectlySoft Inc. and the Perfect project authors
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Licensed under Apache License v2.0
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// See http://perfect.org/licensing.html &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; license information
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//===----------------------------------------------------------------------===//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectLib
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectHTTP
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectHTTPServer
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectCURL
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; cURL

let numberRequests = 100

class DeinitCURL: CURL {
    deinit {
        print(&lt;span class=&quot;code-quote&quot;&gt;&quot;removing CURL request from memory&quot;&lt;/span&gt;)
    }
}

extension DeinitCURL {
    convenience init(completion: @escaping(Int, [UInt8], [UInt8], CURL) -&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;) {
        self.init()
        self.url = &lt;span class=&quot;code-quote&quot;&gt;&quot;https:&lt;span class=&quot;code-comment&quot;&gt;//www.google.com&quot;&lt;/span&gt;
&lt;/span&gt;        self.setOption(CURLOPT_TIMEOUT, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: 1) &lt;span class=&quot;code-comment&quot;&gt;// set the timeout to 5 seconds
&lt;/span&gt;        self.perform() { tuple in
            completion(tuple.0, tuple.1, tuple.2, self)
        }
    }
}


&lt;span class=&quot;code-comment&quot;&gt;// Create HTTP server.
&lt;/span&gt;let server = HTTPServer()


&lt;span class=&quot;code-comment&quot;&gt;// Register your own routes and handlers
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; routes = Routes()
routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/reset&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            returnedCURLObject.reset()
        })
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/resetclose&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            returnedCURLObject.reset()
            returnedCURLObject.close()
        })
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/close&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            returnedCURLObject.close()
        })
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/nothing&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; nothing
&lt;/span&gt;        })
    }
})

&lt;span class=&quot;code-comment&quot;&gt;// Add the routes to the server.
&lt;/span&gt;server.addRoutes(routes)

&lt;span class=&quot;code-comment&quot;&gt;// Set a listen port of 8181
&lt;/span&gt;server.serverPort = 8181

&lt;span class=&quot;code-comment&quot;&gt;// Set a document root.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// This is optional. If you &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not want to serve &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; content then &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not set &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Setting the document root will automatically add a &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; file handler &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the route /**
&lt;/span&gt;server.documentRoot = &lt;span class=&quot;code-quote&quot;&gt;&quot;./webroot&quot;&lt;/span&gt;

&lt;span class=&quot;code-comment&quot;&gt;// Gather command line options and further configure the server.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Run the server with --help to see the list of supported arguments.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Command line arguments will supplant any of the values set above.
&lt;/span&gt;configureServer(server)

&lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; {
	&lt;span class=&quot;code-comment&quot;&gt;// Launch the HTTP server.
&lt;/span&gt;	&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; server.start()
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; PerfectError.networkError(let err, let msg) {
	print(&lt;span class=&quot;code-quote&quot;&gt;&quot;Network error thrown: \(err) \(msg)&quot;&lt;/span&gt;)
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="11095" author="rocky" created="Tue, 1 Nov 2016 17:13:41 -0400"  >&lt;p&gt;Hi Jeffrey Bergier,&lt;/p&gt;

&lt;p&gt;Thank you for sharing these codes and screen shots! &lt;/p&gt;

&lt;p&gt;However, please NOTE that the first tuple $0 of &lt;tt&gt;perform()&lt;/tt&gt; indicates whether the current curl request is completed or not, and in most cases a while($0) waiting is strongly recommended because if run &lt;tt&gt;reset()&lt;/tt&gt; method immediately even before it&apos;s done, it possibly would cause something unexpected. &lt;/p&gt;

&lt;p&gt;If you don&apos;t mind, I would like to rewrite this server with similar function later. &lt;/p&gt;

&lt;p&gt;Best, &lt;br/&gt;
&#8211; Rockford Wei&lt;/p&gt;</comment>
                            <comment id="11096" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 17:35:59 -0400"  >&lt;p&gt;Hi Rockford,&lt;/p&gt;

&lt;p&gt;Thanks for looking into this. I just took a look at the function signature and now I see what you&apos;re seeing. There are two perform() functions. One returns a Bool that indicates whether the request is done or not and the other doesn&apos;t. The function I was using is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unable to find source-code formatter for language: swift.&lt;/span&gt; Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xml&lt;/div&gt;&lt;pre&gt;&lt;span class=&quot;code-comment&quot;&gt;/// Perform the CURL request in a non-blocking manner. The closure will be called with the resulting code, header and body data.
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; func perform(closure: @escaping (Int, [UInt8], [UInt8]) -&amp;gt; ()) { ... }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and just to make sure I was calling into the right function I altered my code to make sure Swift had all the right types in the callback.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unable to find source-code formatter for language: swift.&lt;/span&gt; Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xml&lt;/div&gt;&lt;pre&gt;extension DeinitCURL {
    convenience init(completion: @escaping(Int, [UInt8], [UInt8], CURL) -&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;) {
        self.init()
        self.url = &lt;span class=&quot;code-quote&quot;&gt;&quot;https:&lt;span class=&quot;code-comment&quot;&gt;//www.google.com&quot;&lt;/span&gt;
&lt;/span&gt;        self.setOption(CURLOPT_TIMEOUT, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: 1) &lt;span class=&quot;code-comment&quot;&gt;// set the timeout to 5 seconds
&lt;/span&gt;        self.perform() { (code: Int, header: [UInt8], body: [UInt8]) in
            completion(code, header, body, self)
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So it doesn&apos;t seem like this really simple code example is doing anything to reset requests mid flight. The perform() without the Bool should only be called when the request is fully complete right?&lt;/p&gt;

&lt;p&gt;It sounds like you all have this on the chopping block for an improved API later. Maybe for now, I&apos;ll just use performFully() and do the threading myself with PerfectThread. Let me know what you think.&lt;/p&gt;

&lt;p&gt;-Jeff&lt;/p&gt;</comment>
                            <comment id="11097" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 17:47:31 -0400"  >&lt;p&gt;Sorry to be a bother again. I just tried a similar 4 function test with manual threading using only performFully() and it seems to have the same problem. You can see the memory chart for /manual/resetclose and main.swift file is pasted below:&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  main.swift
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  PerfectTemplate
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  Created by Kyle Jessup on 2015-11-05.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//	Copyright (C) 2015 PerfectlySoft, Inc.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//===----------------------------------------------------------------------===//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// This source file is part of the Perfect.org open source project
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Copyright (c) 2015 - 2016 PerfectlySoft Inc. and the Perfect project authors
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Licensed under Apache License v2.0
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// See http://perfect.org/licensing.html &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; license information
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//===----------------------------------------------------------------------===//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectLib
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectHTTP
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectHTTPServer
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectCURL
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; cURL
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectThread

class DeinitCURL: CURL {
    deinit {
        print(&lt;span class=&quot;code-quote&quot;&gt;&quot;removing CURL request from memory&quot;&lt;/span&gt;)
    }
}

extension DeinitCURL {
    convenience init(completion: @escaping(Int, [UInt8], [UInt8], CURL) -&amp;gt; &lt;span class=&quot;code-object&quot;&gt;Void&lt;/span&gt;) {
        self.init()
        self.url = &lt;span class=&quot;code-quote&quot;&gt;&quot;https:&lt;span class=&quot;code-comment&quot;&gt;//www.google.com&quot;&lt;/span&gt;
&lt;/span&gt;        self.setOption(CURLOPT_TIMEOUT, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: 1) &lt;span class=&quot;code-comment&quot;&gt;// set the timeout to 5 seconds
&lt;/span&gt;        self.perform() { (code: Int, header: [UInt8], body: [UInt8]) in
            completion(code, header, body, self)
        }
    }
}


&lt;span class=&quot;code-comment&quot;&gt;// Create HTTP server.
&lt;/span&gt;let server = HTTPServer()

let numberRequests = 100

&lt;span class=&quot;code-comment&quot;&gt;// Register your own routes and handlers
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; routes = Routes()

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/manual/close&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(url: &lt;span class=&quot;code-quote&quot;&gt;&quot;https:&lt;span class=&quot;code-comment&quot;&gt;//www.google.com&quot;&lt;/span&gt;)
&lt;/span&gt;        request.setOption(CURLOPT_TIMEOUT, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: 1)
        Threading.getQueue(name: &lt;span class=&quot;code-quote&quot;&gt;&quot;Networking&quot;&lt;/span&gt;, type: .concurrent).dispatch {
            request.performFully()
            request.close()
        }
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/manual/nothing&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(url: &lt;span class=&quot;code-quote&quot;&gt;&quot;https:&lt;span class=&quot;code-comment&quot;&gt;//www.google.com&quot;&lt;/span&gt;)
&lt;/span&gt;        request.setOption(CURLOPT_TIMEOUT, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: 1)
        Threading.getQueue(name: &lt;span class=&quot;code-quote&quot;&gt;&quot;Networking&quot;&lt;/span&gt;, type: .concurrent).dispatch {
            request.performFully()
        }
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/manual/reset&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(url: &lt;span class=&quot;code-quote&quot;&gt;&quot;https:&lt;span class=&quot;code-comment&quot;&gt;//www.google.com&quot;&lt;/span&gt;)
&lt;/span&gt;        request.setOption(CURLOPT_TIMEOUT, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: 1)
        Threading.getQueue(name: &lt;span class=&quot;code-quote&quot;&gt;&quot;Networking&quot;&lt;/span&gt;, type: .concurrent).dispatch {
            request.performFully()
            request.reset()
        }
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/manual/resetclose&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(url: &lt;span class=&quot;code-quote&quot;&gt;&quot;https:&lt;span class=&quot;code-comment&quot;&gt;//www.google.com&quot;&lt;/span&gt;)
&lt;/span&gt;        request.setOption(CURLOPT_TIMEOUT, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;: 1)
        Threading.getQueue(name: &lt;span class=&quot;code-quote&quot;&gt;&quot;Networking&quot;&lt;/span&gt;, type: .concurrent).dispatch {
            request.performFully()
            request.reset()
            request.close()
        }
    }
})


routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/reset&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            returnedCURLObject.reset()
        })
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/resetclose&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            returnedCURLObject.reset()
            returnedCURLObject.close()
        })
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/close&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            returnedCURLObject.close()
        })
    }
})

routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/nothing&quot;&lt;/span&gt;, handler: { request, response in
    response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
    response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;Hello, world!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
    response.completed()
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 0 ..&amp;lt; numberRequests {
        let request = DeinitCURL(completion: { (code, header, body, returnedCURLObject) in
            &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; nothing
&lt;/span&gt;        })
    }
})

&lt;span class=&quot;code-comment&quot;&gt;// Add the routes to the server.
&lt;/span&gt;server.addRoutes(routes)

&lt;span class=&quot;code-comment&quot;&gt;// Set a listen port of 8181
&lt;/span&gt;server.serverPort = 8181

&lt;span class=&quot;code-comment&quot;&gt;// Set a document root.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// This is optional. If you &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not want to serve &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; content then &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not set &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Setting the document root will automatically add a &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; file handler &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the route /**
&lt;/span&gt;server.documentRoot = &lt;span class=&quot;code-quote&quot;&gt;&quot;./webroot&quot;&lt;/span&gt;

&lt;span class=&quot;code-comment&quot;&gt;// Gather command line options and further configure the server.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Run the server with --help to see the list of supported arguments.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Command line arguments will supplant any of the values set above.
&lt;/span&gt;configureServer(server)

&lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; {
	&lt;span class=&quot;code-comment&quot;&gt;// Launch the HTTP server.
&lt;/span&gt;	&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; server.start()
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; PerfectError.networkError(let err, let msg) {
	print(&lt;span class=&quot;code-quote&quot;&gt;&quot;Network error thrown: \(err) \(msg)&quot;&lt;/span&gt;)
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="11101" author="rocky" created="Wed, 2 Nov 2016 12:21:17 -0400"  >&lt;p&gt;Hi Jeffrey,&lt;/p&gt;

&lt;p&gt;Thank you for updating your issue! Would you like to try the code below? &lt;br/&gt;
This server generates two different routes: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;/&lt;/tt&gt;   &amp;#8211;  a page that collects external URLs concurrently. It will dispatch 32 threads and wait them all, then join the results to display. Usually 2~3 seconds it will return.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;/liner&lt;/tt&gt; &amp;#8211;  the same as &lt;tt&gt;/&lt;/tt&gt; but requesting per url one by one without threading, just for comparing the sequential result.  Maybe will take 20+ seconds.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Unfortunately up to now the Threading.join() method is still under developing, so I used a quick dirty trick to wait all threads in a time, sorry about that.&lt;/p&gt;

&lt;p&gt;Hope you can share the same experience with me! Thank you!&lt;/p&gt;

&lt;p&gt;Warm,&lt;br/&gt;
Rocky&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  main.swift
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  PerfectTemplate
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//  Created by Kyle Jessup on 2015-11-05.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//	Copyright (C) 2015 PerfectlySoft, Inc.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//===----------------------------------------------------------------------===//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// This source file is part of the Perfect.org open source project
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Copyright (c) 2015 - 2016 PerfectlySoft Inc. and the Perfect project authors
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Licensed under Apache License v2.0
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// See http://perfect.org/licensing.html &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; license information
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//===----------------------------------------------------------------------===//
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectLib
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectHTTP
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectHTTPServer
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectCURL
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; cURL
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectThread

&lt;span class=&quot;code-comment&quot;&gt;// Create HTTP server.
&lt;/span&gt;let server = HTTPServer()

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; func ping () -&amp;gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; {
	let curl = CURL(url:&lt;span class=&quot;code-quote&quot;&gt;&quot;http:&lt;span class=&quot;code-comment&quot;&gt;//hestiatv.domain.com/t/&quot;&lt;/span&gt;)
&lt;/span&gt;	defer {
		curl.close()
	}
	let (_, _, body ) = curl.performFully()
  let content = &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;(bytes:body, encoding:&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.Encoding.utf8)
	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; content!
}

&lt;span class=&quot;code-comment&quot;&gt;// Register your own routes and handlers
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; routes = Routes()
routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/liner&quot;&lt;/span&gt;, handler: {
		request, response in
		let tm = time(nil)
		&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; collector = [&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;]()
		&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; _ in 1...32 {
			let result = ping()
			collector.append(result)
		}
		let delay = time(nil) - tm
		let total = collector.count
		let content = collector.reduce(&quot;&quot;, +)
		response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
		response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;&amp;lt;H1&amp;gt;\(total) URL requests in Queue: \(delay) Seconds&amp;lt;/H1&amp;gt;&amp;lt;p&amp;gt;\(content)&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
		response.completed()
}) &lt;span class=&quot;code-comment&quot;&gt;//end add
&lt;/span&gt;
routes.add(method: .get, uri: &lt;span class=&quot;code-quote&quot;&gt;&quot;/&quot;&lt;/span&gt;, handler: {
		request, response in
		let tm = time(nil)
		&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; collector = [&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;]()

		let mylock = Threading.Lock()

		&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; _ in 1...32 {
			Threading.getQueue(name: &lt;span class=&quot;code-quote&quot;&gt;&quot;Networking&quot;&lt;/span&gt;, type: .concurrent).dispatch {
				let result = ping()
				mylock.doWithLock {
					collector.append(result)
				}
			}
		}
		&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(collector.count &amp;lt; 31) {
			sleep(1)
		}
		let delay = time(nil) - tm
		let total = collector.count
		let content = collector.reduce(&quot;&quot;, +)
		response.setHeader(.contentType, value: &lt;span class=&quot;code-quote&quot;&gt;&quot;text/html&quot;&lt;/span&gt;)
		response.appendBody(string: &lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;&amp;lt;body&amp;gt;&amp;lt;H1&amp;gt;\(total) URL requests Concurrently: \(delay) Seconds&amp;lt;/H1&amp;gt;&amp;lt;p&amp;gt;\(content)&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;)
		response.completed()
}) &lt;span class=&quot;code-comment&quot;&gt;//end add
&lt;/span&gt;
&lt;span class=&quot;code-comment&quot;&gt;// Add the routes to the server.
&lt;/span&gt;server.addRoutes(routes)

&lt;span class=&quot;code-comment&quot;&gt;// Set a listen port of 8181
&lt;/span&gt;server.serverPort = 8181

&lt;span class=&quot;code-comment&quot;&gt;// Set a document root.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// This is optional. If you &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not want to serve &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; content then &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not set &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Setting the document root will automatically add a &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; file handler &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the route /**
&lt;/span&gt;server.documentRoot = &lt;span class=&quot;code-quote&quot;&gt;&quot;./webroot&quot;&lt;/span&gt;

&lt;span class=&quot;code-comment&quot;&gt;// Gather command line options and further configure the server.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Run the server with --help to see the list of supported arguments.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// Command line arguments will supplant any of the values set above.
&lt;/span&gt;configureServer(server)

&lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; {
	&lt;span class=&quot;code-comment&quot;&gt;// Launch the HTTP server.
&lt;/span&gt;	&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; server.start()
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; PerfectError.networkError(let err, let msg) {
	print(&lt;span class=&quot;code-quote&quot;&gt;&quot;Network error thrown: \(err) \(msg)&quot;&lt;/span&gt;)
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="11102" author="jeffburg@jeffburg.com" created="Wed, 2 Nov 2016 13:30:10 -0400"  >&lt;p&gt;Hi Rockford,&lt;/p&gt;

&lt;p&gt;I tried it. It looks like a nifty solution for keeping track of when all the requests finish. But the class I&apos;m using already does that. I&apos;m more worried about the memory leaks. That said, I tried this code and it definitely appears to leak less. Each refresh causes less of a spike. But I attached a new screenshot above. It still looks like its leaking memory to me. Also, I tried a bunch of different methods in the defer {} block in the code you provided. reset(), close(), reset(); close(); nothing, etc. It seemed to make no difference to the rate of leaking.&lt;/p&gt;

&lt;p&gt;I think there are two primary issues. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;1) those two methods don&apos;t really make sense. Either separately or together. They seem like a relic of the C API. Close() is called when the CURL object is being deallocated, so that should happen automatically. Reset should be achieved by creating a new CURL object.&lt;/li&gt;
	&lt;li&gt;I understand this is a matter of opinion, so we can ignore this for now&lt;/li&gt;
	&lt;li&gt;2) There seems to be a fundamental problem with the memory used by this object. I tried looking through it myself, but I&apos;m just not experienced enough when it comes to UnsafeMutablePointers and allocating and reallocating memory. But it seems like that is where the problem is. There are no retain cycles, Swift is deallocating the CURL objects, but some of the memory allocated by the CURL objects is not being deallocated.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let me know what you think.&lt;/p&gt;

&lt;p&gt;-Jeff&lt;/p&gt;</comment>
                            <comment id="11103" author="rocky" created="Wed, 2 Nov 2016 15:36:14 -0400"  >&lt;p&gt;Hi Jeffrey,&lt;/p&gt;

&lt;p&gt;I simplified my sample code with using a single CURL of &lt;tt&gt;reset&lt;/tt&gt; in a multi-thread context and found no leaks for several minutes, so I don&apos;t think what happened to you is irrelevant to perfect CURL or Threading.&lt;/p&gt;

&lt;p&gt;However, I will keep watching the PerfectTemplate itself, or if you found any discoveries, please don&apos;t hesitate to share.&lt;/p&gt;

&lt;p&gt;Thank you so much, you are so thoughtful!&lt;/p&gt;

&lt;p&gt;Best,&lt;br/&gt;
&#8211; Rocky&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; cURL
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectCURL
&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; PerfectThread

let curl = CURL()
let mylock = Threading.Lock()


func agent () {
		&lt;span class=&quot;code-keyword&quot;&gt;var&lt;/span&gt; collector = [Int]()

		&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; _ in 1...32 {
			Threading.getQueue(name: &lt;span class=&quot;code-quote&quot;&gt;&quot;Networking&quot;&lt;/span&gt;, type: .concurrent).dispatch {

				mylock.doWithLock {
            let _ = curl.reset()
            let _ = curl.setOption(CURLOPT_URL, s:&lt;span class=&quot;code-quote&quot;&gt;&quot;http:&lt;span class=&quot;code-comment&quot;&gt;//hestiatv.domain.com/t/&quot;&lt;/span&gt;)
&lt;/span&gt;            let (_, _, body ) = curl.performFully()
            collector.append(body.count)
				}&lt;span class=&quot;code-comment&quot;&gt;//end Lock
&lt;/span&gt;			}&lt;span class=&quot;code-comment&quot;&gt;//end dispatch
&lt;/span&gt;		}
		&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(collector.count &amp;lt; 32) {
			sleep(1)
		}&lt;span class=&quot;code-comment&quot;&gt;//end wait
&lt;/span&gt;		print(collector.count)
}

&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;) {
  agent()
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; &lt;span class=&quot;image-wrap&quot; style=&quot;&quot;&gt;&lt;a id=&quot;10226_thumb&quot; href=&quot;http://jira.perfect.org:8080/secure/attachment/10226/10226_Screen+Shot+2016-11-02+at+3.28.39+PM.png&quot; title=&quot;Screen Shot 2016-11-02 at 3.28.39 PM.png&quot; file-preview-type=&quot;image&quot; file-preview-id=&quot;10226&quot; file-preview-title=&quot;Screen Shot 2016-11-02 at 3.28.39 PM.png&quot;&gt;&lt;img src=&quot;http://jira.perfect.org:8080/secure/thumbnail/10226/_thumb_10226.png&quot; style=&quot;border: 0px solid black&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="11104" author="jeffburg@jeffburg.com" created="Wed, 2 Nov 2016 15:38:16 -0400"  >&lt;p&gt;Thanks Rocky,&lt;/p&gt;

&lt;p&gt;I&apos;ll take a look at my implementation and see if I can reduce the number of CURL objects I create. &lt;/p&gt;

&lt;p&gt;Thanks for all your help,&lt;br/&gt;
-Jeff&lt;/p&gt;</comment>
                            <comment id="11105" author="rocky" created="Wed, 2 Nov 2016 16:01:14 -0400"  >&lt;p&gt;Hi Jeffrey Bergier,&lt;/p&gt;

&lt;p&gt;Thank you for your patience! Yes, finally I confirm that it was an existing bug of PerfectTemplate itself. If you don&apos;t mind, I would like to close the current issue and create a more specific new issue instead. Again, both Perfect-Thread and Perfect-CURL are very cool &amp;amp; safe libraries and you can use them without any worries.&lt;/p&gt;

&lt;p&gt;Thank you for your great contribution!&lt;/p&gt;

&lt;p&gt;Sincerely Yours,&lt;br/&gt;
&#8211; Rockford Wei&lt;/p&gt;</comment>
                            <comment id="11106" author="jeffburg@jeffburg.com" created="Wed, 2 Nov 2016 16:56:24 -0400"  >&lt;p&gt;Oh, its a bug in perfect template? Can you link to that bug here. I use perfect template code as the starting point for my project. So I want to make sure I make the same fix &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="11107" author="rocky" created="Wed, 2 Nov 2016 17:00:06 -0400"  >&lt;p&gt;Hi Jeffrey Bergier,&lt;/p&gt;

&lt;p&gt;Yes, we are locating and fixing the bug right now, so you can follow  &lt;a href=&quot;http://jira.perfect.org:8080/browse/ISS-315&quot; title=&quot;PerfectTemplate Memory Leak&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ISS-315&quot;&gt;&lt;del&gt;ISS-315&lt;/del&gt;&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;Thank you!.&lt;/p&gt;

&lt;p&gt;&#8211; Rockford Wei&lt;/p&gt;</comment>
                            <comment id="11108" author="rocky" created="Wed, 2 Nov 2016 17:01:12 -0400"  >&lt;p&gt;Hi Jeffrey Bergier,&lt;/p&gt;

&lt;p&gt;Thank you for your contribution, now this issue was move to &lt;a href=&quot;http://jira.perfect.org:8080/browse/ISS-315&quot; title=&quot;PerfectTemplate Memory Leak&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ISS-315&quot;&gt;&lt;del&gt;ISS-315&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&#8211; Rockford Wei&lt;/p&gt;</comment>
                            <comment id="11131" author="rocky" created="Tue, 8 Nov 2016 09:28:58 -0500"  >&lt;p&gt;Reopened as requested by customer, Jeffrey Bergier, although neither PerfectTemplate nor CURL/Threading was found with actual memory leaks, which were misreported by Instruments of Xcode.&lt;/p&gt;</comment>
                            <comment id="11461" author="thomascalmon" created="Tue, 7 Mar 2017 15:48:38 -0500"  >&lt;p&gt;Hi guys.&lt;/p&gt;

&lt;p&gt;I&apos;m facing a lot of memory leaks when using CURL. I need doing about 35k synchronous requests, memory usage starts in ~8mb and finishes higher than ~60mb (max in ~85mb).&lt;/p&gt;

&lt;p&gt;Prints attached!&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;</comment>
                            <comment id="11463" author="kjessup" created="Tue, 7 Mar 2017 19:33:57 -0500"  >&lt;p&gt;OK can you do your test again with the newer version I pushed? I tagged it as 2.0.5.&#160;&lt;/p&gt;</comment>
                            <comment id="11465" author="thomascalmon" created="Wed, 8 Mar 2017 09:30:00 -0500"  >&lt;p&gt;Well, memory leaks have stoped!&lt;br/&gt;
Thanks so much.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="10804">ISS-315</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="10218" name="CURLLeak.zip" size="66642" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 15:04:36 -0400"/>
                            <attachment id="10225" name="Hello__world__and_PerfectTemplate_xcodeproj_and_CURLLeak_and_swiftroom.png" size="717279" author="jeffburg@jeffburg.com" created="Wed, 2 Nov 2016 13:24:29 -0400"/>
                            <attachment id="10221" name="Instruments2_and_Hello__world__and_cURL_swift_and_HipChat.png" size="646427" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 16:54:13 -0400"/>
                            <attachment id="10220" name="Instruments2_and_Hello__world__and_cURL_swift_and_HipChat.png" size="805821" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 16:52:59 -0400"/>
                            <attachment id="10222" name="Instruments4_and_Hello__world__and_main_swift_and_CURLLeak.png" size="1385209" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 17:03:26 -0400"/>
                            <attachment id="10308" name="Memory leaks 01.png" size="55121" author="thomascalmon" created="Tue, 7 Mar 2017 15:48:22 -0500"/>
                            <attachment id="10307" name="Memory leaks 02.png" size="58682" author="thomascalmon" created="Tue, 7 Mar 2017 15:48:21 -0500"/>
                            <attachment id="10310" name="Memory leaks 03.png" size="228200" author="thomascalmon" created="Tue, 7 Mar 2017 15:48:24 -0500"/>
                            <attachment id="10309" name="Memory leaks 04.png" size="81566" author="thomascalmon" created="Tue, 7 Mar 2017 15:48:24 -0500"/>
                            <attachment id="10223" name="PerfectTemplate_xcodeproj_and_Hello__world__and_CURLLeak.png" size="818180" author="jeffburg@jeffburg.com" created="Tue, 1 Nov 2016 17:45:33 -0400"/>
                            <attachment id="10219" name="Screen Shot 2016-11-01 at 4.24.04 PM.png" size="246604" author="rocky" created="Tue, 1 Nov 2016 16:24:32 -0400"/>
                            <attachment id="10226" name="Screen Shot 2016-11-02 at 3.28.39 PM.png" size="843192" author="rocky" created="Wed, 2 Nov 2016 15:35:10 -0400"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10400" key="com.atlassian.servicedesk.approvals-plugin:sd-approvals">
                        <customfieldname>Approvals</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10500" key="com.atlassian.servicedesk:sd-customer-organizations">
                        <customfieldname>Organizations</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i002i7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10101" key="com.atlassian.servicedesk:sd-request-participants">
                        <customfieldname>Request participants</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10104" key="com.atlassian.servicedesk:sd-sla-field">
                        <customfieldname>Time to resolution</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>