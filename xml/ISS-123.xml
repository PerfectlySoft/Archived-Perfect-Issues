<!-- 
RSS generated by JIRA (7.3.0#73011-sha1:3c73d0e0b5ea20e2128531b9adf9b0585752b90a) at Tue Feb 06 20:48:38 UTC 2018

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://jira.perfect.org:8080/si/jira.issueviews:issue-xml/ISS-123/ISS-123.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>PerfectlySoft JIRA</title>
    <link>http://jira.perfect.org:8080</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.3.0</version>
        <build-number>73011</build-number>
        <build-date>03-01-2017</build-date>
    </build-info>

<item>
            <title>[ISS-123] Feature request: AWS Lambda support</title>
                <link>http://jira.perfect.org:8080/browse/ISS-123</link>
                <project id="10007" key="ISS">Issues</project>
                    <description>&lt;p&gt;Not sure what AWS would need to do to make Swift/Perfect available for Lambda development, but I&apos;d love to see this availability.  I would imagine Swift/Perfect already would be usable from EC2.&lt;/p&gt;</description>
                <environment></environment>
        <key id="10551">ISS-123</key>
            <summary>Feature request: AWS Lambda support</summary>
                <type id="10109" iconUrl="http://jira.perfect.org:8080/secure/viewavatar?size=xsmall&amp;avatarId=10304&amp;avatarType=issuetype">Support Request</type>
                                                <status id="6" iconUrl="http://jira.perfect.org:8080/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="vince-marco">Vince Marco</reporter>
                            <created>Thu, 11 Feb 2016 12:35:00 -0500</created>
                <updated>Wed, 13 Apr 2016 16:27:35 -0400</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="10469" author="johnmorrell" created="Thu, 11 Feb 2016 18:41:35 -0500"  >&lt;p&gt;It is relatively straight forward to run on AWS via Docker and ECS.&lt;/p&gt;</comment>
                            <comment id="10470" author="linxyfe" created="Tue, 12 Apr 2016 08:54:50 -0400"  >&lt;p&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=johnmorrell&quot; class=&quot;user-hover&quot; rel=&quot;johnmorrell&quot;&gt;John Morrell&lt;/a&gt; how can Docker and ECS help us ?&lt;/p&gt;</comment>
                            <comment id="10471" author="loopbum" created="Tue, 12 Apr 2016 09:08:00 -0400"  >&lt;p&gt;@vince-marco &lt;em&gt;*&lt;b&gt;&quot;I would imagine Swift/Perfect already would be usable from EC2&quot;&lt;/b&gt;*&lt;/em&gt;&lt;br/&gt;
That&apos;s great news. Do you have a gist that goes through the steps? It might be trivial but still useful.&lt;/p&gt;

&lt;p&gt;As for Docker, I tried them with Google Containers and they were always failing. Whereas with Amazon EC2 and Ubuntu (Trusty) 14.04 LTS, you can pass ssh -o &quot;ServerAliveInterval 10&quot; when connecting and it will not timeout.&lt;/p&gt;

&lt;p&gt;Looking forward to a straightforward setup gist for AWS EC2 Ubuntu 14.04 LTS.&lt;/p&gt;</comment>
                            <comment id="10472" author="sha0" created="Tue, 12 Apr 2016 12:30:26 -0400"  >

&lt;p&gt;vince-marco: Hello. If you log into the Amazon EC2 Console&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, the us-east-1 region has a public perfect-ubuntu-1510 Amazon Machine Image (AMI) from owner 106004027494. Does this information help you?&lt;/p&gt;

&lt;p&gt;loopbum: Hello.  Have you tried the PerfectlySoft Inc. Ubuntu 15.10 Perfect Docker image? It can be found here&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#Images:sort=name&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#Images:sort=name&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://hub.docker.com/r/perfectlysoft/ubuntu/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hub.docker.com/r/perfectlysoft/ubuntu/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="10473" author="sha0" created="Tue, 12 Apr 2016 23:36:02 -0400"  >&lt;p&gt;loopbum: I&apos;m afraid that I&apos;ve misunderstood what it is that you&apos;re interested in.  Sorry about that.  I don&apos;t know what a &quot;setup gist&quot; is.&lt;/p&gt;</comment>
                            <comment id="10474" author="sha0" created="Wed, 13 Apr 2016 14:44:57 -0400"  >&lt;p&gt;loopbum: Yes, I know what a &quot;gist&quot; is, here on GitHub.  Getting Swift and Perfect to be available in your own system will depend on your operating system and its version.  In general, the steps are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Extract the right Swift download into the filesystem&lt;/li&gt;
	&lt;li&gt;Put the Perfect git repository somewhere, perhaps as a /usr/src/perfect/ directory&lt;/li&gt;
	&lt;li&gt;In the Perfect PerfectLib/ directory, read the Linux build notes in the read-me file and run &apos;make&apos; and &apos;make install&apos;&lt;/li&gt;
	&lt;li&gt;In the Perfect PerfectServer/ directory, read the Linux build notes in the read-me file and run &apos;make&apos; and &apos;make install&apos;&lt;/li&gt;
	&lt;li&gt;In the Perfect Connectors/ directory, for each module&apos;s directory, read the Linux build notes in the read-me file and run &apos;make&apos;, then copy the resulting file.so and file.swiftmodule into somewhere useful, perhaps into the /usr/local/lib/ directory&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Only Ubuntu is considered for the Linux build notes, but Fedora, Red Hat, CentOS should have counterparts.&lt;/p&gt;</comment>
                            <comment id="10475" author="loopbum" created="Wed, 13 Apr 2016 15:07:58 -0400"  >&lt;p&gt;@vince-marco see,&lt;br/&gt;
&lt;a href=&quot;https://medium.com/@gigq/using-swift-in-aws-lambda-6e2a67a27e03#.t1s3jnyas&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://medium.com/@gigq/using-swift-in-aws-lambda-6e2a67a27e03#.t1s3jnyas&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="10476" author="vince-marco" created="Wed, 13 Apr 2016 16:27:35 -0400"  >&lt;p&gt;I agree with the comments.  Perfect is not needed for implementing AWS Lamdbas.  API Gateway handles all REST request/response interaction.  The JS bootstrapping is a bit hokey, but that is on AWS and cannot be resolved through Perfect.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10400" key="com.atlassian.servicedesk.approvals-plugin:sd-approvals">
                        <customfieldname>Approvals</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10200" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>External issue ID</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>110</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10500" key="com.atlassian.servicedesk:sd-customer-organizations">
                        <customfieldname>Organizations</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0013j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10101" key="com.atlassian.servicedesk:sd-request-participants">
                        <customfieldname>Request participants</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10104" key="com.atlassian.servicedesk:sd-sla-field">
                        <customfieldname>Time to resolution</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>