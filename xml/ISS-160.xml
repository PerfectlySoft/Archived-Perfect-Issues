<!-- 
RSS generated by JIRA (7.3.0#73011-sha1:3c73d0e0b5ea20e2128531b9adf9b0585752b90a) at Tue Feb 06 20:48:53 UTC 2018

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://jira.perfect.org:8080/si/jira.issueviews:issue-xml/ISS-160/ISS-160.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>PerfectlySoft JIRA</title>
    <link>http://jira.perfect.org:8080</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.3.0</version>
        <build-number>73011</build-number>
        <build-date>03-01-2017</build-date>
    </build-info>

<item>
            <title>[ISS-160] Perfect should be more &quot;Swifty&quot;</title>
                <link>http://jira.perfect.org:8080/browse/ISS-160</link>
                <project id="10007" key="ISS">Issues</project>
                    <description>&lt;p&gt;We&apos;d heard from a few people that Perfect isn&apos;t as &quot;Swifty&quot; as it should be. We&apos;d love to hear what this means to you, and where you think we could improve Perfect to be more so. What is &quot;Swifty&quot; to you that Perfect isn&apos;t?&lt;/p&gt;</description>
                <environment></environment>
        <key id="10588">ISS-160</key>
            <summary>Perfect should be more &quot;Swifty&quot;</summary>
                <type id="10109" iconUrl="http://jira.perfect.org:8080/secure/viewavatar?size=xsmall&amp;avatarId=10304&amp;avatarType=issuetype">Support Request</type>
                                                <status id="6" iconUrl="http://jira.perfect.org:8080/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="seanstephens">Sean Stephens</reporter>
                            <created>Tue, 5 Apr 2016 12:15:56 -0400</created>
                <updated>Mon, 16 May 2016 23:11:39 -0400</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="10545" author="siejkowski" created="Tue, 5 Apr 2016 12:55:30 -0400"  >&lt;p&gt;Hi &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; There were two main points that I&apos;ve stated during presentation when I was sharing that opinion: the lack of Swift Package Manager support and the lack of modularity. Both makes it way harder to use Perfect along with the rest of Swift ecosystem. &lt;/p&gt;

&lt;p&gt;However, I can see there&apos;s already work in progress on SPM support, which is great. It will hopefully make it way easier to switch some components, like adding alternative templating engines or data serialization/deserialization libraries. &lt;/p&gt;

&lt;p&gt;I guess I haven&apos;t said much new, since this is what you&apos;ve already doing &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="10546" author="lucasc53" created="Tue, 5 Apr 2016 13:00:23 -0400"  >&lt;p&gt;Thanks &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=siejkowski&quot; class=&quot;user-hover&quot; rel=&quot;siejkowski&quot;&gt;Krzysztof Siejkowski&lt;/a&gt; - you&apos;re right, we&apos;re working on both SPM and modularization, and your comments reinforce the need for us to work on these.  &lt;/p&gt;

&lt;p&gt;Was there anything in particular - for either, or anything else that comes to mind - that you thought we should consider?&lt;/p&gt;</comment>
                            <comment id="10547" author="ejohnsonw" created="Tue, 5 Apr 2016 13:11:21 -0400"  >&lt;p&gt;&quot;More swifty&quot; I think that is what i was trying to say when I opened  &lt;a href=&quot;http://jira.perfect.org:8080/browse/ISS-147&quot; title=&quot;Make separate repos for Server,PerfectLib,MySQL. MongoDB, etc.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ISS-147&quot;&gt;ISS-147&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="10548" author="kjessup" created="Tue, 5 Apr 2016 13:16:06 -0400"  >&lt;p&gt;My personal take, as the main author:&lt;/p&gt;

&lt;p&gt;The project was created in a modularized fashion to begin with. We had a core library of utilities, around that a variety of server types as separate executables, and a variety of database connectors as separate modules. It&apos;s true we include a templating engine and JSON encode/decode utilities, but those are provided as a convenience and nothing in the system forces you to use them or prevents you from using your own. EDIT: I should also point out here that your code, which the system dynamically loads, exists as one or more separate modules. Nothing gets compiled as one monolithic executable.&lt;/p&gt;

&lt;p&gt;We are marching towards SPM but it&apos;s important to remember that SPM is still heavily in flux, has not yet had a full release and isn&apos;t slated to do so for quite some time. While it certainly shows promise, it&apos;s currently a bit limited (unable to incorporate C targets) and somewhat cumbersome (git repo all the things) to use. Not to get all stodgy, but I&apos;d prefer a generic makefile. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; It is steadily improving though so I don&apos;t mean to be disparaging.&lt;/p&gt;

&lt;p&gt;Also please note that Perfect was released before SPM existed, so yes, we have a little work to do to fit into how it wants things done.&lt;/p&gt;</comment>
                            <comment id="10549" author="seanstephens" created="Tue, 5 Apr 2016 13:52:24 -0400"  >&lt;p&gt;Other than modularity and SPM compatibility (both active discussions with ongoing effort being expended to address them) - I&apos;d love to unpack if there is anything else that we could address on the subject of &quot;swiftness&quot; vs. other platforms or just &quot;for swiftynesses sake&quot;. Any suggestions on other developers we could ask about this?&lt;/p&gt;</comment>
                            <comment id="10550" author="danappelxx" created="Tue, 5 Apr 2016 14:25:51 -0400"  >&lt;p&gt;I think the bigger topic here that hasn&apos;t been mentioned is the quality of the codebase. While I don&apos;t want to just flat out say that the code is &quot;ugly&quot;, I think I won&apos;t be the first to say that it&apos;s not &quot;swifty&quot;. &lt;/p&gt;

&lt;p&gt;The things that makes Swift beautiful and modern are, in my opinion, the shifts from (this is not a comprehensive list):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;inheritance to composition (&lt;tt&gt;class&lt;/tt&gt; -&amp;gt; &lt;tt&gt;protocol&lt;/tt&gt; with extensions, &lt;tt&gt;final&lt;/tt&gt; attribute used by default)&lt;/li&gt;
	&lt;li&gt;imperative code to functional code (use of higher-order functions)&lt;/li&gt;
	&lt;li&gt;primarily reference types to primarily value types (&lt;tt&gt;struct&lt;/tt&gt; over &lt;tt&gt;class&lt;/tt&gt; where possible)&lt;/li&gt;
	&lt;li&gt;mutability to immutability (&lt;tt&gt;let&lt;/tt&gt; by default, &lt;tt&gt;var&lt;/tt&gt; only if necessary)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Perfect&apos;s codebase doesn&apos;t do a wonderful job of following these patterns. I don&apos;t think its fair to say that Perfect has been written in idiomatic Swift until it does a better job of doing so. Unfortunately, fixing this means rewriting a large part of the project, potentially from scratch.&lt;/p&gt;

&lt;p&gt;I hate to be so brutal, but if Perfect actually wants to be &quot;perfect&quot; in the context of Swift libraries, there&apos;s a &lt;em&gt;lot&lt;/em&gt; of work to be done.&lt;/p&gt;</comment>
                            <comment id="10551" author="seanstephens" created="Tue, 5 Apr 2016 14:51:42 -0400"  >&lt;p&gt;Great feedback! Thanks! Although I can&apos;t help but consider that as one of the lead contributors to other &quot;competitive&quot; projects to Perfect from before Perfect was released (Zewo and Taylor), you might have a slight bias. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Quickly picking through Perfect, I genuinely don&apos;t see many examples of what you are suggesting. For example, mutability to immutability - I couldn&apos;t find a single instance in Perfect code. Although as Perfect is the largest codebase in the server-side swift space by far, you would be correct in saying that if we have been doing something wrong for the last 14 months, it would be a big rewrite.&lt;/p&gt;

&lt;p&gt;Perhaps I&apos;m coming off as defensive, for which I apologize - but if you can show us specific examples, it would be very helpful. (Especially ones which aren&apos;t just one person&apos;s coding style, but visibly a departure from idiomatic Swift). &lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=Danappelxx&quot; class=&quot;user-hover&quot; rel=&quot;Danappelxx&quot;&gt;Dan Appel&lt;/a&gt; !&lt;/p&gt;</comment>
                            <comment id="10552" author="tannernelson" created="Tue, 5 Apr 2016 15:01:47 -0400"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unable to find source-code formatter for language: php.&lt;/span&gt; Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xml&lt;/div&gt;&lt;pre&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; func PerfectServerModuleInit() {
	
	&lt;span class=&quot;code-comment&quot;&gt;// Install the built-in routing handler.
&lt;/span&gt;	&lt;span class=&quot;code-comment&quot;&gt;// Using &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; system is optional and you could install your own system &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; desired.
&lt;/span&gt;	Routing.Handler.registerGlobally()
	
	Routing.Routes[&lt;span class=&quot;code-quote&quot;&gt;&quot;GET&quot;&lt;/span&gt;, [&lt;span class=&quot;code-quote&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;index.html&quot;&lt;/span&gt;] ] = { (_:WebResponse) in &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; IndexHandler() }
	Routing.Routes[&lt;span class=&quot;code-quote&quot;&gt;&quot;/foo/*/baz&quot;&lt;/span&gt;] = { _ in &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; EchoHandler() }
	Routing.Routes[&lt;span class=&quot;code-quote&quot;&gt;&quot;/foo/bar/baz&quot;&lt;/span&gt;] = { _ in &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; EchoHandler() }
	Routing.Routes[&lt;span class=&quot;code-quote&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;/user/{id}/baz&quot;&lt;/span&gt;] = { _ in &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Echo2Handler() }
	Routing.Routes[&lt;span class=&quot;code-quote&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;/user/{id}&quot;&lt;/span&gt;] = { _ in &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Echo2Handler() }
	Routing.Routes[&lt;span class=&quot;code-quote&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;/user/{id}/baz&quot;&lt;/span&gt;] = { _ in &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Echo3Handler() }
	
	&lt;span class=&quot;code-comment&quot;&gt;// Test &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; one via command line with curl:
&lt;/span&gt;	&lt;span class=&quot;code-comment&quot;&gt;// curl --data &lt;span class=&quot;code-quote&quot;&gt;&quot;{\&quot;&lt;/span&gt;id\&lt;span class=&quot;code-quote&quot;&gt;&quot;:123}&quot;&lt;/span&gt; http://0.0.0.0:8181/raw --header &lt;span class=&quot;code-quote&quot;&gt;&quot;Content-Type:application/json&quot;&lt;/span&gt;
&lt;/span&gt;	Routing.Routes[&lt;span class=&quot;code-quote&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;/raw&quot;&lt;/span&gt;] = { _ in &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; RawPOSTHandler() }
	
	&lt;span class=&quot;code-comment&quot;&gt;// Check the console to see the logical structure of what was installed.
&lt;/span&gt;	print(&lt;span class=&quot;code-quote&quot;&gt;&quot;\(Routing.Routes.description)&quot;&lt;/span&gt;)
}

class IndexHandler: RequestHandler {
	
	func handleRequest(request: WebRequest, response: WebResponse) {
		response.appendBodyString(&lt;span class=&quot;code-quote&quot;&gt;&quot;Index handler: You accessed path \(request.requestURI())&quot;&lt;/span&gt;)
		response.requestCompletedCallback()
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code snippet shows examples violating all items on @Danappelxx&apos;s list. It also has a lot of shared state which wasn&apos;t explicitly mentioned on the list, but is related to using structs and immutability. &lt;/p&gt;

&lt;p&gt;(Disclosure: I work on Vapor, Zewo, and SwiftX)&lt;/p&gt;</comment>
                            <comment id="10553" author="danappelxx" created="Tue, 5 Apr 2016 15:01:54 -0400"  >&lt;p&gt;Ah sorry, to make good on those two points:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Full disclosure, I am on the core team of Zewo and Taylor (though Taylor isn&apos;t following a lot of those either, and has pretty much been abandoned at this point)&lt;/li&gt;
	&lt;li&gt;Immutability vs mutability isn&apos;t a very strong point, but &lt;a href=&quot;https://github.com/PerfectlySoft/Perfect/blob/master/PerfectLib/Routing.swift#L134&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; is an example of what I&apos;m talking about. It is a global, mutable variable which is in many ways an anti-pattern. I hate to bring up Zewo as a counter-example, but the approach Zewo uses is, in my opinion, much better - &lt;a href=&quot;https://github.com/Zewo/Router/blob/master/Source/Router.swift#L30&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;all the routes are finalized at initialization&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I could look harder and bring up more examples, but I don&apos;t think its necessary to find a comprehensive list of examples to show my point. Again, I appreciate how much hard work has been put into Perfect and I&apos;m really just playing devil&apos;s advocate here.&lt;/p&gt;</comment>
                            <comment id="10554" author="seanstephens" created="Tue, 5 Apr 2016 15:04:30 -0400"  >&lt;p&gt;Hey! The whole gang is here! (Where&apos;s IBM?)&lt;/p&gt;

&lt;p&gt;EDIT: (Note &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=tannernelson&quot; class=&quot;user-hover&quot; rel=&quot;tannernelson&quot;&gt;Tanner&lt;/a&gt; - that&apos;s not the Perfect codebase)&lt;/p&gt;

&lt;p&gt;Thanks guys - we&apos;ll look into your suggestions. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="10555" author="loopbum" created="Tue, 5 Apr 2016 18:59:53 -0400"  >&lt;p&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=SeanStephens&quot; class=&quot;user-hover&quot; rel=&quot;seanstephens&quot;&gt;Sean Stephens&lt;/a&gt; Looks like PerfectlySoft is coming along great. May I ask how well it will work with IBM&apos;s Kitura project as you mentioned IBM?  I am very interested in using Swift on Ubuntu LTS on Amazon EC2 where I am also using Python 3, Anaconda and TensorFlow. I&apos;d like to integrate TensorFlow into a REST based access API. I know there&apos;s a DeepLearning Kit on Github here for Swift but it&apos;s an Apache 2.0 license and doesn&apos;t look like there&apos;s much activity.&lt;/p&gt;</comment>
                            <comment id="10556" author="danappelxx" created="Tue, 5 Apr 2016 22:14:29 -0400"  >&lt;p&gt;Just wanted to respond to a couple thing I saw you mention off hand - this isn&apos;t entirely related but I still think they should be set straight.&lt;/p&gt;

&lt;p&gt;&amp;gt;Although I can&apos;t help but consider that as one of the lead contributors to other &quot;competitive&quot; projects to Perfect from before Perfect was released (Zewo and Taylor), you might have a slight bias. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I think this sort of attitude isn&apos;t very healthy for the community. While competition is good for a growing ecosystem, I think that collaboration is even better. As programmers, we don&apos;t want to reinvent the wheel at every step and end up with a giant mess of incompatible frameworks and standards. For this reason, Zewo teamed up with Vapor, Swifton, and (partially) Kitura and began work on &lt;a href=&quot;https://github.com/SwiftX&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;SwiftX&lt;/a&gt;, which is a set of cross-platform standards. Through SwiftX, one could take their Vapor application and without changing a single line of code, serve it from both Zewo&apos;s and Kitura&apos;s servers. I really don&apos;t want to see Perfect as a competitor, but due to certain architectural decisions (SPM and modularity, mostly) its difficult to imagine collaboration or even compatibility with one another.&lt;/p&gt;

&lt;p&gt;&amp;gt;Although as Perfect is the largest codebase in the server-side swift space by far, you would be correct in saying that if we have been doing something wrong for the last 14 months, it would be a big rewrite.&lt;/p&gt;

&lt;p&gt;Just wanted to say that the first part of this statement is not true. &lt;a href=&quot;https://gist.github.com/Danappelxx/221295f63f33c70084cbbe5e0620cd68&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Here&lt;/a&gt; are the outputs of counting the LOC of the entirety of the Zewo organization (with all of its subprojects) vs Perfect. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
zewo: 34424
perfect: 20576
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt;EDIT: (Note &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=tannernelson&quot; class=&quot;user-hover&quot; rel=&quot;tannernelson&quot;&gt;Tanner&lt;/a&gt; - that&apos;s not the Perfect codebase)&lt;/p&gt;

&lt;p&gt;While it&apos;s not a snippet from the codebase, it&apos;s an example of consuming the API&apos;s provided by Perfect, which is really more telling than the implementation itself.&lt;/p&gt;</comment>
                            <comment id="10557" author="seanstephens" created="Wed, 6 Apr 2016 10:47:18 -0400"  >&lt;p&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=Danappelxx&quot; class=&quot;user-hover&quot; rel=&quot;Danappelxx&quot;&gt;Dan Appel&lt;/a&gt; - it looks like we are in violent agreement! I used the word &quot;competition&quot; in quotes, as we are hardly competitors, except in the friendly sporting spirit sense of the term. &quot;Competition&quot; isn&apos;t an evil term and can be very healthy, unless it is used with malice - and I certainly do not use it in that sense.&lt;/p&gt;

&lt;p&gt;One of my friends - the owner of one of the largest duck farms in North America - once said to me - &quot;Duck farmers don&apos;t compete with other duck farms. They compete with chicken farms.&quot; Methinks that in the server-side space, we are beset with &quot;competitors&quot; (from Python to PHP, from Node.js to Java). Ultimately, if we genuinely want to see the possibilities of Swift be realized, we should be working together. &quot;To go fast, go alone; to go far, go together&quot;.&lt;/p&gt;

&lt;p&gt;Perfect has some unique advantages already, outside of this GitHub thread. We have years of funding in place; we have access to the massive closed-source codebase of Apple&apos;s first server-side language (Lasso - &lt;a href=&quot;https://en.wikipedia.org/wiki/Lasso_(programming_language&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Wiki&lt;/a&gt;), &lt;a href=&quot;http://www.lassoguide.com&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Guide&lt;/a&gt; - from Lasso version 1 to 9) and the team and community who supported the language for the last 22 years, and the BDFL of the same; we have world-renowned development advisors who have proven successes on speed dial; we have many Apps in production already we are supporting (some with Fortune 500&apos;s); we have a strong digital marketing firm and PR firm to lean on; we have a CEO with green hair, etc. This project will never be abandoned - it will be driven hard for years to come with constant ongoing improvement.&lt;/p&gt;

&lt;p&gt;Given all of these facts - if it turns out that we need to re-write the whole codebase from scratch because it isn&apos;t, well, Perfect, we will. Over and over and over - because that is what we love to do as developers. The name Perfect wasn&apos;t intended to be descriptive, it was intended to be aspirational. This is not a quick project idea for us. It&apos;s a life choice.&lt;/p&gt;

&lt;p&gt;You and @tannernelson, amongst others here, are clearly remarkable individuals with visionary skills and deep understanding of our mutual new love: Swift. Would you consider helping us learn as developers and additionally help improve Perfect&apos;s Swiftiness?&lt;/p&gt;

&lt;p&gt;I propose we start a &lt;a href=&quot;https://github.com/PerfectlySoft/Perfect/wiki/Pursuing-Swiftiness&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;transparent wiki &lt;/a&gt; discussing your suggestions, and get you and others in the community to add what they think epitomizes Swiftiness, describe examples and possible fixes of the same, and help flesh out what Swiftiness really means. To a degree, Swiftiness will always be in the eyes of the beholder. But as a community, we could define and realize best practices that we have missed and clarify what styles are best. In the short term, we&apos;ll arrange to go fix these things in Perfect - possibly even together. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Then, as a group, we could make something remarkable and useful for years to come. Something as close to Perfect as we together can make it.&lt;/p&gt;

&lt;p&gt;Interested?&lt;/p&gt;</comment>
                            <comment id="10558" author="paulofaria" created="Wed, 6 Apr 2016 13:19:30 -0400"  >&lt;p&gt;I&apos;ll be straight. I&apos;m Zewo&apos;s founder. All opinions stated are mine only.&lt;/p&gt;

&lt;p&gt;Currently I have a problem with Perfect. That might change after theses events, who knows. My biggest problem with Perfect is that, in my opinion, you guys are staining Swift&apos;s reputation on the server side. This issue was raised because of the code quality. Mainly the &quot;swiftyness&quot; of the code. That&apos;s a big problem, but not the biggest. The biggest problem is that you are not community driven. Take those problems with the heavy marketing you have and you get a framework with 6,551 Github stars that does not represent the best for the server side swift community. You guys are a company, so you&apos;re obviously profit oriented. I don&apos;t know how you plan on monetizing and how far you would work in the community&apos;s behalf as a result of that. As &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=Danappelxx&quot; class=&quot;user-hover&quot; rel=&quot;Danappelxx&quot;&gt;Dan Appel&lt;/a&gt; mentioned we (different server side swift frameworks) started &lt;a href=&quot;https://github.com/SwiftX&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;SwiftX&lt;/a&gt; (Swift Cross Project Standards). We think this will really make the community grow. If you want to be Perfect for the community, here&apos;s your chance.&lt;/p&gt;</comment>
                            <comment id="10559" author="seanstephens" created="Wed, 6 Apr 2016 13:55:31 -0400"  >&lt;p&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=paulofaria&quot; class=&quot;user-hover&quot; rel=&quot;paulofaria&quot;&gt;Paulo Faria&lt;/a&gt; Wow, that&apos;s heavy! A stain, even!&lt;/p&gt;

&lt;p&gt;Obviously Swiftiness is easily curable - it&apos;s just time and input from well-meaning developers, and ongoing pressure to improve and tweak - internally and externally.&lt;/p&gt;

&lt;p&gt;Where are we failing on the community side? We have hundreds of developers engaged in dialogue with us on chat channels, thousands of developers engaging with us on Twitter, we&apos;ve been all over the world talking with and engaging with developers at conferences and Meetups in multiple languages, and have dozens of large companies working with us on innovative new ideas and deployment mechanisms. We&apos;ve connected with tens of thousands of developers in the last few months - and most of them (with the exception of the ones in this thread) seem to be very happy with our efforts and very excited with our project.&lt;/p&gt;

&lt;p&gt;Sure, we are a company. But the word &quot;company&quot; isn&apos;t an inherently evil concept. We just came together as a unit to provide strength of branding and as an investment vehicle to ensure we can create a stable, reliable product that stands the test of time - and pay people for their efforts. That&apos;s not an evil idea (neither is the idea of profit, IMHO), but rather symbolic of community unto itself. Getting paid to do work isn&apos;t wrong. We are humans, too. We have kids. They need to eat. Why not make it a company and market our efforts? &#175;&amp;#95;(&#12484;)_/&#175;&lt;/p&gt;

&lt;p&gt;Or is this an attempt to get us to look at your new SwiftX idea under the guise of the &quot;community&quot; banner? It appears to be a new idea (previous links to it didn&apos;t work - your post is my first time seeing it - certainly no-one reached out to us in a magnanimous community way), with only a few people engaged. Two people does not a community make.&lt;/p&gt;

&lt;p&gt;We&apos;ll definitely look into it, now that we know it exists - thanks! &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Maybe we&apos;ll bring some laundry soap with us so we don&apos;t leave a stain. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="10560" author="joannis" created="Wed, 6 Apr 2016 14:10:14 -0400"  >&lt;p&gt;I&apos;ll have my word here too. I&apos;m not a part of Zewo or QuTheory. But I&apos;m a part of SwiftX and created MongoKitten and I&apos;ll explain why your library is horrible for developers, and libraries alike. Not just our but also your libraries.&lt;/p&gt;

&lt;p&gt;Your library is bloated. You offer a complete package like Zewo does with the main difference being that you force the developer to use all or none of your libraries. Everything&apos;s so integrated that switching away from a part of your library makes you fight the system.&lt;/p&gt;

&lt;p&gt;I think some of your things are great, and I think  some are horrible. I want to use the great parts and ditch the bad. But I can&apos;t. I need to fight the library and write more code than I should just to make it work.&lt;/p&gt;

&lt;p&gt;One day your, mine or anyone&apos;s library will not suffice for someone. And they&apos;ll do it better. With SwiftX I can change from HTTP Server A to B. From MongoDB Driver A to B, and from router/middleware/socket library from A to B whenever I damn please.&lt;/p&gt;

&lt;p&gt;So by locking your developers into a complete package everyone loses.&lt;/p&gt;

&lt;p&gt;Your developers spend more time working around issues they have with some of it. Or they&apos;ll decrease in productivity opposed to different libraries.&lt;/p&gt;

&lt;p&gt;Your library will suffer because once a big portion of your features aren&apos;t relevant anymore and other libraries just do it better you&apos;ll lose customers.&lt;/p&gt;

&lt;p&gt;And other libraries will suffer because developers are stuck in your bloated library.&lt;/p&gt;</comment>
                            <comment id="10561" author="seanstephens" created="Wed, 6 Apr 2016 17:18:42 -0400"  >&lt;p&gt;Where was all this great feedback months ago, guys? &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; We could have explained our rationale then.&lt;/p&gt;

&lt;p&gt;Methinks there is some confusion as to our intent, or how Perfect is structured at this time. There is no trap, no grand attack on other people&apos;s work, no handcuffs keeping anyone using any one part of Perfect or restriction to do so. In fact, our first product had a FastCGI connector for Apache, plus a stand-alone server - giving you various options, from day one. With Perfect you can &quot;change from HTTP Server A to B. From MongoDB Driver A to B, and from router/middleware/socket library from A to B whenever you please&quot;. Methinks there is much confusion and FUD being created here. Perhaps people feel left out? That was not our intent. We&apos;d love to work with you guys.&lt;/p&gt;

&lt;p&gt;However, a self-respecting professional doesn&apos;t keep all their tools scattered around the shop. They keep their core tools neatly arranged in a toolbox. When you need the core tools, there are easily accessible for you - you don&apos;t have to spend hours looking for them. Then when you need special tools, you go looking for them. If you need a stronger set of pliers, you add them to what you are carrying. This is core to the principles of lean manufacturing, and also apply to development.&lt;/p&gt;

&lt;p&gt;If you only need a single screw driver for a single hobby project or you work on a small team, projects should exist to do so. If you want to get a full-featured toolset to build epic projects and want consistency across your organization - you want a strong, reliable core library accessible in one place. You shouldn&apos;t be wasting your time looking - you should be spending your time developing cool new projects.&lt;/p&gt;

&lt;p&gt;In fact - a scattered set of tools also makes it very difficult for a new developer to get up and running, or for an older project to get started again after a period of pause. If we are trying to create a gated community for &quot;special&quot; people, every tool should be hidden in a different corner. If we want people to be able to get up and running quickly and effectively, we&apos;ll want one toolbox with a quality default toolset that allows people to pick up and run. This makes it easier to work with, and easier to build a strong community.&lt;/p&gt;

&lt;p&gt;Whether we like it or not - server-side Swift development is a new category. Server-side Swift developers are unicorns at the moment. They need easy mechanisms to get up to speed, they need everything in one place. This is why we started Perfect this way - to make it easy for new people - to make it easy to build a community around great tools with a great new language - not scrap about whose MongoDB connector is better. That will just be divisive and limit Swift&apos;s growth. (And IMHO, this is why we have collected 25,000 Twitter followers in that time - we make it easy for people to understand.)&lt;/p&gt;

&lt;p&gt;An example of a toolset that does things in this manner is... Swift. You don&apos;t download thousands of pieces to get up and running. You download one project, and use it. And when you need more tools that don&apos;t come default in the package, you go get them. I&apos;m also confused - if marketing and capitalism really rub people the wrong way, should you really be working with Apple-backed products? &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I will note, we are not against you. I would hope, one day, we can all play in the &lt;a href=&quot;https://www.youtube.com/watch?v=WJTBPdVpdMc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;same sandbox nicely together&lt;/a&gt;. We are listening to your suggestions, as a community, and we are working on modularization of our core library (e.g. we released a stand-alone MySQL connector today). We will happily work with you, co-exist with you, and improve with you - and not get in your way. But we aren&apos;t giving up, either. Ever.&lt;/p&gt;

&lt;p&gt;We will provide a core toolset for developers, all in one package, that makes it easy to get up and running and provides a reliable foundation for the future - a default of excellence. And that doesn&apos;t need to be contrary or incompatible with all of the great stuff everywhere else - and SwiftX. Why do people think these ideas are incompatible? That&apos;s just silly.&lt;/p&gt;

&lt;p&gt;This is a great time to have this conversation, however - as the whole idea is only a few months old, and we have many, many years of future work together. Just because our popularity is high and marketing is good doesn&apos;t mean we are the enemy! Let&apos;s work together!&lt;/p&gt;</comment>
                            <comment id="10562" author="gjnilsen" created="Wed, 6 Apr 2016 17:50:43 -0400"  >&lt;p&gt;I wish you could provide just a thin layer between the web and our own code, no mySQL connectors, or anything else. Only requests are interesting. I wish someone could just cut the cr*p and make something like this.&lt;/p&gt;</comment>
                            <comment id="10563" author="joannis" created="Wed, 6 Apr 2016 18:13:19 -0400"  >&lt;p&gt;I agree. We should work together, not against each other. We&apos;re all part of the swift community in the end. But I fundamentally disagree with your statement on the developer&apos;s toolbox.&lt;/p&gt;

&lt;p&gt;I think you&apos;re right in one aspect. There mustn&apos;t be a need for your boilerplate for a project to contain tens if not hundreds of dependencies. But that is where you misunderstand the need for SwiftX.&lt;/p&gt;

&lt;p&gt;SwiftX doesn&apos;t require us to split up into tiny fragments. But it allows the user to unify his libraries more easily.&lt;/p&gt;

&lt;p&gt;For example: &lt;tt&gt;Vapor&lt;/tt&gt; has it&apos;s own build-in webserver. Yet it allows any other SwiftX compliant webserver to plug in as a replacement.&lt;/p&gt;

&lt;p&gt;This allows Vapor to be easy to set up (no additional dependencies required) without withholding you from replacing their server with another one that you prefer.&lt;/p&gt;

&lt;p&gt;A project like &lt;tt&gt;Perfect&lt;/tt&gt; can still offer the complete package. But there are only 2 ways &lt;tt&gt;Perfect&lt;/tt&gt; could be viable in my eyes.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Perfect adopts a standard like but not necessarily part of SwiftX and cooperates actively with other projects&lt;/li&gt;
	&lt;li&gt;Perfect splits up into tiny libraries and has a bigger one (Perfect itself) that unifies them&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Even if Perfect were to make it&apos;s own standards like SwiftX does that&apos;d be a much better option than the current state is.&lt;/p&gt;</comment>
                            <comment id="10564" author="joannis" created="Wed, 6 Apr 2016 19:26:45 -0400"  >&lt;p&gt;I&apos;ll give you a list of concrete points &lt;tt&gt;Perfect&lt;/tt&gt; can improve on. Some of which might require patience for an upcoming update to swift/SPM:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Get rid of C dependencies where you don&apos;t need them&lt;/li&gt;
	&lt;li&gt;Compile C dependencies with Swift where you still need C dependencies&lt;/li&gt;
	&lt;li&gt;Don&apos;t try to do everything yourself. Other projects with a smaller scope are better able to focus on the goal. Doing a hundred things at once will never be as effective as focusing on a few. We&apos;re not programming in Java. This is Swift&lt;/li&gt;
	&lt;li&gt;Swift has guidelines over &lt;a href=&quot;https://swift.org/documentation/api-design-guidelines/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; for developing APIs. Try to stick to that as much as possible&lt;/li&gt;
	&lt;li&gt;Collaborate. Opensource is about collaboration, not competition. You&apos;re a company.. I get that. But if you&apos;re developing an OpenSource product. Act like it. Your Apple argument above is completely invalid. Apple collaborates with swift. You compete with the community.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="10565" author="ejohnsonw" created="Wed, 6 Apr 2016 19:39:17 -0400"  >&lt;p&gt;I guess this is when I say I&apos;m not affiliated with any of the teams/frameworks mentioned. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=SeanStephens&quot; class=&quot;user-hover&quot; rel=&quot;seanstephens&quot;&gt;Sean Stephens&lt;/a&gt; @kjessup.  I commend you for being open to listen, it requires a special kind of &quot;loving what you do&quot;.&lt;/p&gt;


&lt;p&gt;A few thoughts:&lt;/p&gt;

&lt;p&gt;I relatively new to Swift to make much sense of the code issues mentioned. Being mostly a backend developer I definitely agree a couple of things said there:  that the &quot;compet*tion&quot; is not within but with other frameworks, other languages, and that collaboration would be beneficial to this nascent ecosystem.&lt;/p&gt;

&lt;p&gt;In my case, I like the the concept of &quot;starter kit&quot; that you mentioned, which is very convenient specially if you don&apos;t have a lot of time to shop around or ...like in my case you are new to the scene and don&apos;t know what to choose, just wanted to be able to use SPM, and a way of checking out only certain parts of the repo (submodules).&lt;/p&gt;

&lt;p&gt;I&apos;m looking forward to see where you guys are going to take Perfect, knowing that in fact it&apos;s not perfect, but it&apos;s perfectible. &lt;/p&gt;

</comment>
                            <comment id="10566" author="seanstephens" created="Wed, 6 Apr 2016 19:50:45 -0400"  >&lt;p&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=Joannis&quot; class=&quot;user-hover&quot; rel=&quot;Joannis&quot;&gt;Joannis Orlandos&lt;/a&gt; - absolutely fantastic feedback, this is exactly the help we need to make our community stronger. (and &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=ejohnsonw&quot; class=&quot;user-hover&quot; rel=&quot;ejohnsonw&quot;&gt;Mark Johnson&lt;/a&gt; - thanks of the vote of confidence!)&lt;/p&gt;

&lt;p&gt;We could continue ad nauseam on the merits and benefits of a centralized code base vs. hundreds of separate dependencies. Although those who came from the NPM world will be prone to inspirational dependency trees, it&apos;s certainly not always a &lt;a href=&quot;http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;strong coding practise&lt;/a&gt; to rely on breaking everything up into little bits and relying haphazardly on everyone else.&lt;/p&gt;

&lt;p&gt;I also appreciate - despite many of the contributors to this thread being the leads for the largest server-side projects in the Swift world - that most iOS developers have been well trained to pick and choose what they want like candy at a candy store from different boxes. And for App development, that&apos;s a dandy practise.&lt;/p&gt;

&lt;p&gt;But those of us who have run companies where thousands of people are calling in after a server melts down (or a cloud node frys), the backup server failed, GIT is down and the codebase fragmentation means it will take weeks to figure out what you did and where you got it from, not minutes - realize that in the server world, reliability and simplicity trumps fancy choices, sometimes. The toolbox idea isn&apos;t a bad one - it just may be something you aren&apos;t used to. For App work, great. For server work... after 23 years of server-side language work, we&apos;ll be hard-pressed to capitulate on breaking up the continent into little countries.&lt;/p&gt;

&lt;p&gt;Ergo, fragmenting into a thousand tiny libraries doesn&apos;t seem like an effective strategy for Perfect at this time. Nor, in the context of a thousand other magnificent libraries already available (Zewo! Vapor! Kitura! etc.), does it make sense to have one more random set. One big library with a marketing engine behind it is still a great flagship for the server-side Swift community, and benefits everyone.&lt;/p&gt;

&lt;p&gt;Having said this - &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=Joannis&quot; class=&quot;user-hover&quot; rel=&quot;Joannis&quot;&gt;Joannis Orlandos&lt;/a&gt; , your point on becoming modular and compatible with other community libraries is genius. I&apos;m a little concerned that this thread didn&apos;t smack of a magnanimous community engagement, and that we&apos;d be bullied and finger-waggled in SwiftX in particular rather than welcomed - but we will certainly approach the idea carefully and with great interest. And all of your other suggestions are bang on. Some of the suggestions by both yourself and &lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=Danappelxx&quot; class=&quot;user-hover&quot; rel=&quot;Danappelxx&quot;&gt;Dan Appel&lt;/a&gt; (and others, off list) have been very constructive and helpful - we have work to do. Thanks for the help. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There&apos;s room in our nascent ecosystem for both ideas to work together harmoniously. We look forward to working more with you!&lt;/p&gt;</comment>
                            <comment id="10567" author="tannernelson" created="Wed, 6 Apr 2016 20:57:00 -0400"  >&lt;p&gt;&amp;gt; we&apos;d be bullied and finger-waggled&lt;/p&gt;

&lt;p&gt;That&apos;s definitely not true! The first rule of SwiftX, as stated on its documentation, is that it&apos;s &lt;b&gt;Inclusive&lt;/b&gt;. We&apos;d welcome Perfect with open arms.&lt;/p&gt;

&lt;p&gt;The issue here is honestly not the code quality. None of us our perfect. That&apos;s why we&apos;re working &lt;em&gt;together&lt;/em&gt; to create the next generation of server side applications with Swift.&lt;/p&gt;

&lt;p&gt;The issue is the marketing strategy that Perfect is employing: referring to the project as an &quot;enterprise-grade web server&quot; and posting it repeatedly on multiple channels to the point where it&apos;s considered spam.  Server side Swift is not ready for the prime time yet. It literally cannot be until Swift 3.0 is released. I think the way you&apos;re advertising is misleading to the community. And it&apos;s ultimately leaving people with a bad taste in their mouths about Swift in general when they see how unstable it currently is. I know you want to take advantage of Swift&apos;s hype to rack up the stars and the followers&#8211;everyone wants to be recognized for their work. But that&apos;s just not going to help us out to have someone advertising server side Swift as something it&apos;s not.&lt;/p&gt;</comment>
                            <comment id="10568" author="seanstephens" created="Wed, 6 Apr 2016 22:34:43 -0400"  >&lt;p&gt;Methinks we&apos;ve turned to a new subject now: marketing. Lovin&apos; the transparency! It&apos;s helpful.&lt;/p&gt;

&lt;p&gt;Technically, an &quot;enterprise&quot; is a business or company. Since we seem to be the only fans of companies in this group, doesn&apos;t it then seem appropriate that we use the word &quot;enterprise&quot; in our marketing? &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; We aren&apos;t the only ones (is IBM here yet? James? You awake?).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www-03.ibm.com/press/us/en/pressrelease/49157.wss&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www-03.ibm.com/press/us/en/pressrelease/49157.wss&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m not sure I agree that Swift isn&apos;t ready for &quot;prime time&quot;. Sure, it&apos;s not finished. But art is never finished, it&apos;s only discarded. We already have dozens of &quot;enterprises&quot; using Perfect in production, happily and safely. Who has a bad taste in their mouth because of Swift&apos;s failure to perform? I haven&apos;t met a single person who has said that yet, anywhere in the world. On that note - I have to honestly ask, by your line of reasoning: when will PHP be ready for prime-time? Hehe.&lt;/p&gt;

&lt;p&gt;As a marketing guy (hey! this is my territory!), I can tell you without reservation: no developer in the world is going to throw everything they have ever done out the window and just jump into Swift because our website says &quot;company-grade&quot;. So should we spend the rest of the year marketing that &quot;Swift is pretty pathetic right now - but you should start thinking about it in four or five years and get involved now anyway&quot;? A) it&apos;s not true, Swift rocks and b) we should all give up now, because the community is going nowhere, fast.&lt;/p&gt;

&lt;p&gt;Big ideas require big claims. Be bold, and then back yourself up. Marketing is based on aspirations, not limitations. &quot;Buy my product because it only sucks a bit&quot; rarely works. &quot;We believe Swift is the future&quot; is the truth.&lt;/p&gt;

&lt;p&gt;Just like companies aren&apos;t The Devil, marketing isn&apos;t The Devil either. And I&apos;m certainly not embarrassed by accusations of successful marketing against us. We are bold, it works, and I don&apos;t feel we should apologize for that - cause its helping everyone. A rising tide lifts all ships. Wouldn&apos;t you rather have a marketing machine on your side, pushing for the adoption of server-side Swift from every angle? Are we not a massive asset to your work, instead of a thorn? To fight the chicken farmers of the world on your behalf? To win over PHP and Python and Node guys to come play in our sandbox?&lt;/p&gt;

&lt;p&gt;Having said that, if you guys believe using the term &quot;enterprise-grade&quot; is the unique limitation from us from being friends, I can only think of one place in the entire world it exists (our front page), and it doesn&apos;t hurt to replace that with something that doesn&apos;t rub you the wrong way (Kyle hated that terminology anyway). But we aren&apos;t going to stop building enterprise-grade applications in Perfect and Swift just because we are afraid Swift isn&apos;t good enough for prime-time yet. It&apos;s good enough for us, just as it sits - and it&apos;s getting better every day. The phrase isn&apos;t untrue.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure where we are leaving people with a bad taste in their mouths about Swift - or that really anyone has a bad taste in their mouths about Swift - our how it is &quot;misleading to the community&quot;. I&apos;ve never heard that sentiment before today, nor do I believe we&apos;ve mis-led anyone. Marketing is a good thing. At the end of the day, Swift exists because of Apple, and Apple exists because of good marketing.&lt;/p&gt;

&lt;p&gt;In any case - thanks for the comments about open arms - we feel the same back. &lt;/p&gt;

&lt;p&gt;Onwards!&lt;/p&gt;

</comment>
                            <comment id="10569" author="paulofaria" created="Wed, 6 Apr 2016 22:51:47 -0400"  >&lt;p&gt;Just want to be clear that my reason to be here is simply because I care about the Swift server side ecosystem. My opinions might be strong but they are well based. I know it&apos;s hard to hear such criticism. I&apos;m sure it would be tough for me if I were on your spot. But that&apos;s what you get when you&apos;re in the spotlight. You should be prepared for this, and this is part of the reason I don&apos;t like your marketing machine. You are heavily marketing something that in my opinion doesn&apos;t reflect the best, the perfect. And that&apos;s what I mean when I say you&apos;re staining server side Swifts image. You know that the main author of Perfect does not have a strong Swift background. So you know that the code will show it. This wouldn&apos;t be a problem if you didn&apos;t have your marketing machine. But when you have code that&apos;s not following Swift best practices that&apos;s being exposed to a lot of people who never saw Swift before. They&apos;re going to think that that is Swift. But it isn&apos;t. OK, you&apos;re working on that now, and that&apos;s awesome. But the damage is done anyway, because you guys decided to heavily market something that&apos;s not the best it can be. You just heavily marketed something built quickly in a small time-frame by someone who doesn&apos;t have a strong Swift background. So that&apos;s going to piss off people that really know swift. I say this as a Swift developer. Not as Zewo founder. Even if I haven&apos;t started Zewo when Perfect was launched I would feel the same way.&lt;/p&gt;

&lt;p&gt;&amp;gt; Methinks there is much confusion and FUD being created here.&lt;/p&gt;

&lt;p&gt;There&apos;s no FUD. We just care about Swift on the server side.&lt;/p&gt;

&lt;p&gt;&amp;gt; Sure, we are a company. But the word &quot;company&quot; isn&apos;t an inherently evil concept.&lt;/p&gt;

&lt;p&gt;I never said that companies are evil. But we all know companies use walled gardens as a strategy. You claim you&apos;re not one of these companies. I really hope this is true, because up to now, you haven&apos;t proven it with actions. I really hope this will change.&lt;/p&gt;

&lt;p&gt;&amp;gt; Or is this an attempt to get us to look at your new SwiftX idea under the guise of the &quot;community&quot; banner?&lt;/p&gt;

&lt;p&gt;To be honest I was unsure about mentioning SwiftX and actually about showing up here at all. But I couldn&apos;t keep these thoughts I&apos;m expressing now to myself. As an active member of server side swift I have this responsibility. The reason we didn&apos;t reach out before it&apos;s because of this walled garden image you guys pass. And you can&apos;t blame it on us for having this view. It&apos;s the sum of your actions that made us see you like that. From the first license to the whole company thing to the monolithic architecture.&lt;/p&gt;

&lt;p&gt;And now we reach the Toolbox example, which is perfect (pun intended haha). You use the analogy of tools for the modules and the toolbox for a collection of modules. Well, that&apos;s exactly what Zewo provides. We have a set of tools, which you can use separately any time you like, and a toolbox which is nothing more than an umbrella package importing the most important modules. I agree with everything you say, and it applies perfectly for Zewo. But unfortunately it doesn&apos;t apply to Perfect. You don&apos;t have a toolbox. You have a blackbox, which you can&apos;t take things out. I&apos;m really happy that you guys are working on modularization now. I just think you got the application of the toolbox concept wrong. Hopefully you&apos;ll see that having separate modules gives all the advantages you claim if you have an umbrella package containing the best tools.&lt;/p&gt;

&lt;p&gt;&amp;gt; Just because our popularity is high and marketing is good doesn&apos;t mean we are the enemy.&lt;/p&gt;

&lt;p&gt;I don&apos;t want to be your enemy. I really want us to grow together. I just have strong opinions, which I&apos;m sure it&apos;s hard to take.&lt;/p&gt;

&lt;p&gt;&amp;gt; One big library with a marketing engine behind it is still a great flagship for the server-side Swift community, and benefits everyone.&lt;/p&gt;

&lt;p&gt;If this library has good Swift coding standards and allows freedom for the community, I couldn&apos;t agree more.&lt;/p&gt;

&lt;p&gt;&amp;gt; bullied and finger-waggled in SwiftX in particular rather than welcomed&lt;/p&gt;

&lt;p&gt;I&apos;m sorry we came down so hard. But it&apos;s simply what we think. You guys are more than welcome to join efforts in SwiftX. I really wish we didn&apos;t have this harsh view of you guys. But again this is all a product of your actions. If you guys are really willing to go for it. We&apos;re here.&lt;/p&gt;</comment>
                            <comment id="10570" author="tannernelson" created="Wed, 6 Apr 2016 23:11:05 -0400"  >&lt;p&gt;&amp;gt; I have to honestly ask, by your line of reasoning: when will PHP be ready for prime-time?&lt;/p&gt;

&lt;p&gt;Lol. True.&lt;/p&gt;

&lt;p&gt;&amp;gt; A rising tide lifts all ships. Wouldn&apos;t you rather have a marketing machine on your side, pushing for the adoption of server-side Swift from every angle?&lt;/p&gt;

&lt;p&gt;Yes, definitely. But there&apos;s a difference between pushing for adoption and scaring people away.&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;m not sure where we are leaving people with a bad taste in their mouths about Swift&lt;/p&gt;

&lt;p&gt;If you want me to send you some of the (unfortunately many) complaints I&apos;ve gotten in my Slack channel about Perfect, I can. But I don&apos;t know if that would be constructive. I&apos;m not trying to make you feel bad about the work you&apos;re doing. It takes courage to post your work online for everyone to look at, and I respect that. There&apos;s really no wrong that can be done by contributing to the OSS community. I just wanted to help you see how I have seen developers responding to Perfect.&lt;/p&gt;</comment>
                            <comment id="10571" author="lucasc53" created="Thu, 7 Apr 2016 09:41:59 -0400"  >&lt;p&gt;The conversation has kind of moved beyond the original question, which is how Perfect could be more &quot;Swifty&quot;.  &lt;/p&gt;

&lt;p&gt;It&apos;s an option to start new threads around the topics that have emerged in the discussion (don&apos;t get me wrong, they have been insightful), but keeping to this particular thread, I&apos;m curious to understand if there are other things we should consider, in order to make Perfect &quot;Swiftier&quot;.&lt;/p&gt;

&lt;p&gt;So bringing it back, this is what I&apos;ve noted:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Swift Package Manager support&lt;/li&gt;
	&lt;li&gt;Modularity&lt;/li&gt;
	&lt;li&gt;Composition (protocol with extensions, final attribute used by default)&lt;/li&gt;
	&lt;li&gt;Functional code (use of higher-order functions)&lt;/li&gt;
	&lt;li&gt;Primarily value types (struct over class where possible)&lt;/li&gt;
	&lt;li&gt;Immutability (let by default, var only if necessary)&lt;/li&gt;
	&lt;li&gt;Flexible library&lt;/li&gt;
	&lt;li&gt;Thinner layer between web and developer&apos;s own code&lt;/li&gt;
	&lt;li&gt;Get rid of unnecessary C dependencies and compile required C dependencies with Swift&lt;/li&gt;
	&lt;li&gt;Align to Swift guidelines for developing APIs&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There&apos;s value in having a &quot;starter kit&quot; for those beginning in Perfect.  And we&apos;ll take a deeper look into SwiftX too.&lt;/p&gt;

&lt;p&gt;Anything else come to mind?&lt;/p&gt;</comment>
                            <comment id="10572" author="seanstephens" created="Thu, 7 Apr 2016 15:13:06 -0400"  >&lt;p&gt;In addition to the initial question of &quot;Swiftiness&quot;, this has been an inspirational thread. One of the most incredible parts of this is the various individuals who came to the table for discussion;&lt;/p&gt;

&lt;p&gt;Lead contributors of some of the most &quot;starred&quot; server-side frameworks on GitHub;&lt;/p&gt;

&lt;p&gt;Perfect  (@kjessup, @seanstephens, @LucasC53)&lt;br/&gt;
Vapor (@tannernelson)&lt;br/&gt;
Zewo (@paulofaria, @Danappelxx)&lt;br/&gt;
Taylor (@Danappelxx)&lt;br/&gt;
MongoKitten (@Joannis)&lt;/p&gt;

&lt;p&gt;I did take away some incredibly helpful points from this thread that we will address ASAP.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Perfect isn&apos;t, yet (Nobody is, yet)&lt;/b&gt;&lt;br/&gt;
We have an opportunity to clean up much of the Perfect codebase to be more &quot;Swifty&quot;, and more modular. As most of Perfect was written before Swift open-sourced, this was somewhat inevitable. (We&apos;ve been working on this for weeks, so suddenly we feel like geniuses). Onwards to glory! Swiftiness incoming.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Companies give developers the Jitters&lt;/b&gt;&lt;br/&gt;
We are a company, not of thousands, but of a few (a micro-community within the community). It&apos;s just a piece of paper indicating that a few of us are working together, in the same office, at the same time, on the same project. We are born from the union of an agency that loves people (&lt;a href=&quot;http://www.treefrog.ca&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Treefrog Inc.&lt;/a&gt;) and a server-side language from Apple (&lt;a href=&quot;http://www.lassosoft.com&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;LassoSoft Inc.&lt;/a&gt;), who together have a reputation for being amazing companies. Treefrog is predicated on community, people, environmental awareness - and lastly, profit. It is not a scary place, it&apos;s &lt;a href=&quot;https://www.facebook.com/Treefrog.Inc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;progressive&lt;/a&gt; and &lt;a href=&quot;https://www.treefrog.ca/why-it-is-great-to-work-at-treefrog&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;awesome&lt;/a&gt;. PerfectlySoft comes from this, it lives in this. We are not Big Blue, we are Little Orange, inside green and blue.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Our Marketing is Aggressive&lt;/b&gt;&lt;br/&gt;
Sorry about that guys, but not really. Our aggressive marketing will bring interest and passion from other communities and drive people to appreciate your work and be part of our new and emerging community. Think of us as your greatest asset, not a stain. Help us get better and be better, don&apos;t just point and cluck your tongues. We are not trying to take over the Swift community. We are trying to take over the world of alternate platform server-side development, on the Swift community&apos;s behalf. Our constant streams of horrendous orange logos are going to ultimately increase your salary. (We didn&apos;t pick the orange, Apple did). Our own project not sucking is key to this, too.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;We should Standardize, together&lt;/b&gt;&lt;br/&gt;
This is one genius idea we hadn&apos;t considered before. Of course we will join you guys, and work towards interoperability and compatibility and community standards. (Though as a marketing guy, I hate the name SwiftX, sorry... &lt;em&gt;troll&lt;/em&gt;). In the short term, we&apos;ve stopped calling ourselves &quot;enterprise-grade&quot;, by your request. We had previously removed &quot;One Language to Rule them All&quot; because a Java developer got really, really cranky about it. Whatever, we&apos;ll add those comments back in later, once we&apos;ve proven the point. It&apos;s not that I don&apos;t believe the points myself, but rather that we aren&apos;t here to detract from the real goal: world-wide Swift domination. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I have two final things to say, that I feel need not to be missed in this crazy thread.&lt;/p&gt;

&lt;p&gt;One, this appears to be the first and largest gathering of minds in server-side Swift&apos;s history, the most stars in one place. This, this thread here, is the thread people will talk about in many years to come, where everyone got together and butted heads, out of which came the future of SSS programming. You people are the leaders of this new community. I appreciate that people have strong opinions, and want to piss on the fat kid and talk about &quot;Slack channel complaints&quot;, but it&apos;s not helpful to the larger Swift vision. If we are to work together, we can&apos;t start off acting like the Perl community. We have to lead not just in developer genius, but also collaborative genius. We have crushed any negative comments about any of you in any of our channels - you won&apos;t find any, and we don&apos;t support the idea of poking at one another. In other words: you guys are the leaders of this new world order, with us in tow. Act like it. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Two, we are going to continue our work with Perfect until it is. We are not slowing down or going away or nerfing anything we do - improve, yes, sleep, no. If you are interested in helping us (while we help you), we&apos;d love to work together. In fact - if you are interested - we are looking for individuals interested in working full time on our server side Swift libraries to improve them. THIS is why we have a company. Want to get paid for your Swift community contributions, either as a full time salaried developer or as a contractor? Lots of people do, including the creators of Swift itself. Contact me off list, and let&apos;s chat. Programmers have a right to eat, too. This is the future, and we are going to be integral to it - we have all of the trappings in place. Come play in our sandbox. Let&apos;s work together.&lt;/p&gt;

&lt;p&gt;And lastly, I would say - I&apos;d love to personally be connected with any and all of you. My lines are open, I/we are not a closed box - in fact, I&apos;m quite open and transparent, all the time. Here&apos;s my personal info, I&apos;d love to hear from you any time - you don&apos;t all have to wait to gang up on us at once, hehe;&lt;/p&gt;

&lt;p&gt;sean@perfect.org&lt;br/&gt;
CEO, PerfectlySoft Inc., Treefrog Inc. and LassoSoft Inc.&lt;br/&gt;
&lt;a href=&quot;http://lnkd.in/QM5j5b&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://lnkd.in/QM5j5b&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.treefrog.ca/sean-stephens&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.treefrog.ca/sean-stephens&lt;/a&gt;&lt;br/&gt;
905-836-4442 x109&lt;br/&gt;
&lt;a href=&quot;https://twitter.com/treefrogCEO&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://twitter.com/treefrogCEO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We&apos;ll be working away for a while to clean up our act (based on your input), and then we&apos;ll join you at the standards party. Happy coding!&lt;/p&gt;</comment>
                            <comment id="10573" author="seanstephens" created="Thu, 7 Apr 2016 15:55:01 -0400"  >&lt;p&gt;Nobody sends birthday invitations any more. &lt;img class=&quot;emoticon&quot; src=&quot;http://jira.perfect.org:8080/images/icons/emoticons/wink.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Methinks the project could use some better marketing, if it is to be inclusionary.&lt;/p&gt;

&lt;p&gt;EDIT: Where might one find such a Slack channel?&lt;/p&gt;</comment>
                            <comment id="10574" author="tannernelson" created="Thu, 7 Apr 2016 16:13:35 -0400"  >&lt;p&gt;&lt;a href=&quot;http://jira.perfect.org:8080/secure/ViewProfile.jspa?name=SeanStephens&quot; class=&quot;user-hover&quot; rel=&quot;seanstephens&quot;&gt;Sean Stephens&lt;/a&gt; It looks like the poor free Heroku instance powering the Slack inviter is exhausted (&lt;a href=&quot;http://slack.swiftx.io&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://slack.swiftx.io&lt;/a&gt;). An invite has been sent to your email. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10400" key="com.atlassian.servicedesk.approvals-plugin:sd-approvals">
                        <customfieldname>Approvals</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10200" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>External issue ID</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>147</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10500" key="com.atlassian.servicedesk:sd-customer-organizations">
                        <customfieldname>Organizations</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i001br:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10101" key="com.atlassian.servicedesk:sd-request-participants">
                        <customfieldname>Request participants</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10104" key="com.atlassian.servicedesk:sd-sla-field">
                        <customfieldname>Time to resolution</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>