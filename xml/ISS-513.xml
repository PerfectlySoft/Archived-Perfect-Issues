<!-- 
RSS generated by JIRA (7.3.0#73011-sha1:3c73d0e0b5ea20e2128531b9adf9b0585752b90a) at Tue Feb 06 20:51:46 UTC 2018

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
http://jira.perfect.org:8080/si/jira.issueviews:issue-xml/ISS-513/ISS-513.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>PerfectlySoft JIRA</title>
    <link>http://jira.perfect.org:8080</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>7.3.0</version>
        <build-number>73011</build-number>
        <build-date>03-01-2017</build-date>
    </build-info>

<item>
            <title>[ISS-513] With Perfect mySQL does each request need a new db connection?</title>
                <link>http://jira.perfect.org:8080/browse/ISS-513</link>
                <project id="10007" key="ISS">Issues</project>
                    <description></description>
                <environment></environment>
        <key id="11302">ISS-513</key>
            <summary>With Perfect mySQL does each request need a new db connection?</summary>
                <type id="10109" iconUrl="http://jira.perfect.org:8080/secure/viewavatar?size=xsmall&amp;avatarId=10304&amp;avatarType=issuetype">Support Request</type>
                                            <priority id="3" iconUrl="http://jira.perfect.org:8080/images/icons/priorities/medium.svg">Medium</priority>
                        <status id="6" iconUrl="http://jira.perfect.org:8080/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="10001">Won&apos;t Do</resolution>
                                        <assignee username="rocky">Rockford Wei</assignee>
                                    <reporter username="chris@cprince.com">Christopher Prince</reporter>
                            <created>Sat, 12 Aug 2017 23:51:04 -0400</created>
                <updated>Tue, 22 Aug 2017 10:56:54 -0400</updated>
                            <resolved>Sat, 19 Aug 2017 21:27:11 -0400</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="11803" author="chris@cprince.com" created="Sat, 12 Aug 2017 23:53:05 -0400"  >&lt;p&gt;Please see&lt;br/&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/45581141/with-perfect-swift-mysql-must-you-have-a-single-database-connection-per-request&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://stackoverflow.com/questions/45581141/with-perfect-swift-mysql-must-you-have-a-single-database-connection-per-request&lt;/a&gt;&lt;br/&gt;
Thanks!&lt;/p&gt;</comment>
                            <comment id="11805" author="rocky" created="Tue, 15 Aug 2017 09:38:42 -0400"  >&lt;p&gt;You can still reuse the connection for multiple times, but please note that the connection is not thread-safe.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-comment&quot;&gt;// code placeholder
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; MySQL

let mysql = MySQL()

func now(_ id: Int) {
  print(&lt;span class=&quot;code-quote&quot;&gt;&quot;Job Now #&quot;&lt;/span&gt;, id)
  let x = mysql.query(statement: &lt;span class=&quot;code-quote&quot;&gt;&quot;SELECT now() as time&quot;&lt;/span&gt;)
  guard x, let y = mysql.storeResults(),
  let row = y.next() &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
    print(mysql.errorMessage())
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;
  }
  print(row[0] ?? &lt;span class=&quot;code-quote&quot;&gt;&quot;Now() FAILED&quot;&lt;/span&gt;)
  y.close()
}

func user(_ id: Int) {
  print(&lt;span class=&quot;code-quote&quot;&gt;&quot;Job Usr #&quot;&lt;/span&gt;, id)
  let x = mysql.query(statement: &lt;span class=&quot;code-quote&quot;&gt;&quot;select User from user&quot;&lt;/span&gt;)
  guard x, let y = mysql.storeResults(),
    let row = y.next() &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
     print(mysql.errorMessage())
     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;
 }
  print(row[0] ?? &lt;span class=&quot;code-quote&quot;&gt;&quot;User() FAILED&quot;&lt;/span&gt;)
  y.close()
}

_ = mysql.setOption(.MYSQL_SET_CHARSET_NAME, &lt;span class=&quot;code-quote&quot;&gt;&quot;utf8mb4&quot;&lt;/span&gt;)
guard mysql.connect(host: &lt;span class=&quot;code-quote&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, user: &lt;span class=&quot;code-quote&quot;&gt;&quot;root&quot;&lt;/span&gt;, password: &lt;span class=&quot;code-quote&quot;&gt;&quot;your password&quot;&lt;/span&gt;, db: &lt;span class=&quot;code-quote&quot;&gt;&quot;mysql&quot;&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
  print(mysql.errorMessage())
  exit(0)
}

&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; id in 0 ..&amp;lt; 5 {
  now(id)
  user(id)
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;In this example, the both functions are sharing the same connection and running for a few times. That&apos;s OK. However, if each function is running in a separated thread, then it will cause a failure.&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="11814" author="chris@cprince.com" created="Sat, 19 Aug 2017 13:55:31 -0400"  >&lt;p&gt;Thanks for this response. Any plans to make this interface thread-safe? It seems important, for performance purposes, to not open a new connection per REST request.&lt;/p&gt;</comment>
                            <comment id="11815" author="rocky" created="Sat, 19 Aug 2017 21:26:40 -0400"  >&lt;p&gt;Please read this document thoroughly - the performance should not be too bad since mysql is using the current design pattern, so you may open as many connections as need:&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/c-api-threaded-clients.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/c-api-threaded-clients.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                            <comment id="11816" author="rocky" created="Tue, 22 Aug 2017 10:56:54 -0400"  >&lt;p&gt;Actually, you don&apos;t have to wait for any updates from Perfect. Check the gist below:&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/RockfordWei/6f7ab9d66e975ce83b09db5b21c2d726&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/RockfordWei/6f7ab9d66e975ce83b09db5b21c2d726&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&#160;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10400" key="com.atlassian.servicedesk.approvals-plugin:sd-approvals">
                        <customfieldname>Approvals</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10100" key="com.atlassian.servicedesk:vp-origin">
                        <customfieldname>Customer Request Type</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10500" key="com.atlassian.servicedesk:sd-customer-organizations">
                        <customfieldname>Organizations</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i003zr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10101" key="com.atlassian.servicedesk:sd-request-participants">
                        <customfieldname>Request participants</customfieldname>
                        <customfieldvalues>
                                
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10104" key="com.atlassian.servicedesk:sd-sla-field">
                        <customfieldname>Time to resolution</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>